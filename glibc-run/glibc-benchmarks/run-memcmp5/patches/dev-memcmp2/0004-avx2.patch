From 4e1c6e0579fbb51bb50d7b7432ec23387597b484 Mon Sep 17 00:00:00 2001
From: Noah Goldstein <goldstein.w.n@gmail.com>
Date: Mon, 6 Sep 2021 01:54:27 -0400
Subject: [PATCH 04/13] avx2

---
 sysdeps/x86_64/multiarch/ifunc-bcmp.h        |   2 +-
 sysdeps/x86_64/multiarch/ifunc-impl-list.c   |   2 -
 sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S | 411 ++++++++++++-------
 3 files changed, 267 insertions(+), 148 deletions(-)

diff --git a/sysdeps/x86_64/multiarch/ifunc-bcmp.h b/sysdeps/x86_64/multiarch/ifunc-bcmp.h
index b0dacd8526..c50fa0d1ed 100644
--- a/sysdeps/x86_64/multiarch/ifunc-bcmp.h
+++ b/sysdeps/x86_64/multiarch/ifunc-bcmp.h
@@ -32,10 +32,10 @@ IFUNC_SELECTOR (void)
 
   if (CPU_FEATURE_USABLE_P (cpu_features, AVX2)
       && CPU_FEATURE_USABLE_P (cpu_features, BMI2)
-      && CPU_FEATURE_USABLE_P (cpu_features, MOVBE)
       && CPU_FEATURES_ARCH_P (cpu_features, AVX_Fast_Unaligned_Load))
     {
       if (CPU_FEATURE_USABLE_P (cpu_features, AVX512VL)
+	  && CPU_FEATURE_USABLE_P (cpu_features, MOVBE)
 	  && CPU_FEATURE_USABLE_P (cpu_features, AVX512BW))
 	return OPTIMIZE (evex);
 
diff --git a/sysdeps/x86_64/multiarch/ifunc-impl-list.c b/sysdeps/x86_64/multiarch/ifunc-impl-list.c
index dd0c393c7d..cda0316928 100644
--- a/sysdeps/x86_64/multiarch/ifunc-impl-list.c
+++ b/sysdeps/x86_64/multiarch/ifunc-impl-list.c
@@ -42,13 +42,11 @@ __libc_ifunc_impl_list (const char *name, struct libc_ifunc_impl *array,
   IFUNC_IMPL (i, name, bcmp,
 	      IFUNC_IMPL_ADD (array, i, bcmp,
 			      (CPU_FEATURE_USABLE (AVX2)
-                   && CPU_FEATURE_USABLE (MOVBE)
 			       && CPU_FEATURE_USABLE (BMI2)),
 			      __bcmp_avx2)
 	      IFUNC_IMPL_ADD (array, i, bcmp,
 			      (CPU_FEATURE_USABLE (AVX2)
 			       && CPU_FEATURE_USABLE (BMI2)
-                   && CPU_FEATURE_USABLE (MOVBE)
 			       && CPU_FEATURE_USABLE (RTM)),
 			      __bcmp_avx2_rtm)
 	      IFUNC_IMPL_ADD (array, i, bcmp,
diff --git a/sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S b/sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
index 2621ec907a..da9f493ed1 100644
--- a/sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
+++ b/sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
@@ -51,6 +51,18 @@
 #  define VPCMPEQ	vpcmpeqb
 # endif
 
+# ifdef USE_AS_BCMP
+#  define LAST_4X_OFFSET	(VEC_SIZE * -4)
+#  define LAST_4X_S2	rsi, %rdx
+#  define MORE_8X_OFFSET	(VEC_SIZE)
+#  define TEST_REG	eax
+# else
+#  define LAST_4X_OFFSET	0
+#  define LAST_4X_S2	rsi
+#  define MORE_8X_OFFSET	0
+#  define TEST_REG	ecx
+# endif
+
 # ifndef VZEROUPPER
 #  define VZEROUPPER	vzeroupper
 # endif
@@ -78,16 +90,20 @@ ENTRY (MEMCMP)
 	cmp	$VEC_SIZE, %RDX_LP
 	jb	L(less_vec)
 
-	/* From VEC to 2 * VEC.  No branch when size == VEC_SIZE.  */
+	/* From VEC to 2 * VEC.  No branch when size == VEC_SIZE.
+	 */
 	vmovdqu	(%rsi), %ymm1
 	VPCMPEQ	(%rdi), %ymm1, %ymm1
 	vpmovmskb %ymm1, %eax
 	/* NB: eax must be destination register if going to
-	   L(return_vec_[0,2]). For L(return_vec_3 destination register
-	   must be ecx.  */
+	   L(return_vec_[0,2]). For L(return_vec_3 destination
+	   register must be ecx.  */
 	incl	%eax
+# ifdef USE_AS_BCMP
+	jnz	L(return_neq0)
+# else
 	jnz	L(return_vec_0)
-
+# endif
 	cmpq	$(VEC_SIZE * 2), %rdx
 	jbe	L(last_1x_vec)
 
@@ -95,11 +111,14 @@ ENTRY (MEMCMP)
 	vmovdqu	VEC_SIZE(%rsi), %ymm2
 	VPCMPEQ	VEC_SIZE(%rdi), %ymm2, %ymm2
 	vpmovmskb %ymm2, %eax
-	/* If all 4 VEC where equal eax will be all 1s so incl will
-	   overflow and set zero flag.  */
+	/* If all 4 VEC where equal eax will be all 1s so incl
+	   will overflow and set zero flag.  */
 	incl	%eax
+# ifdef USE_AS_BCMP
+	jnz	L(return_neq0)
+# else
 	jnz	L(return_vec_1)
-
+# endif
 	/* Less than 4 * VEC.  */
 	cmpq	$(VEC_SIZE * 4), %rdx
 	jbe	L(last_2x_vec)
@@ -109,101 +128,135 @@ ENTRY (MEMCMP)
 	VPCMPEQ	(VEC_SIZE * 2)(%rdi), %ymm3, %ymm3
 	vpmovmskb %ymm3, %eax
 	incl	%eax
+# ifdef USE_AS_BCMP
+	jnz	L(return_neq0)
+# else
 	jnz	L(return_vec_2)
+# endif
 	vmovdqu	(VEC_SIZE * 3)(%rsi), %ymm4
 	VPCMPEQ	(VEC_SIZE * 3)(%rdi), %ymm4, %ymm4
-	vpmovmskb %ymm4, %ecx
-	incl	%ecx
+	vpmovmskb %ymm4, %TEST_REG
+	incl	%TEST_REG
+# ifdef USE_AS_BCMP
+	jnz	L(return_neq0)
+# else
 	jnz	L(return_vec_3)
-
+# endif
 	/* Go to 4x VEC loop.  */
 	cmpq	$(VEC_SIZE * 8), %rdx
 	ja	L(more_8x_vec)
 
-	/* Handle remainder of size = 4 * VEC + 1 to 8 * VEC without any
-	   branches.  */
+	/* Handle remainder of size = 4 * VEC + 1 to 8 * VEC
+	   without any branches.  */
 
-	/* Load first two VEC from s2 before adjusting addresses.  */
+	/* Load first two VEC from s2 before adjusting addresses.
+	 */
 	vmovdqu	-(VEC_SIZE * 4)(%rsi, %rdx), %ymm1
 	vmovdqu	-(VEC_SIZE * 3)(%rsi, %rdx), %ymm2
+# ifdef USE_AS_BCMP
+	addq	%rdx, %rdi
+# else
 	leaq	-(4 * VEC_SIZE)(%rdi, %rdx), %rdi
 	leaq	-(4 * VEC_SIZE)(%rsi, %rdx), %rsi
+# endif
+	VPCMPEQ	(LAST_4X_OFFSET)(%rdi), %ymm1, %ymm1
+	VPCMPEQ	(LAST_4X_OFFSET + VEC_SIZE)(%rdi), %ymm2, %ymm2
 
-	/* Wait to load from s1 until addressed adjust due to
-	   unlamination of microfusion with complex address mode.  */
-	VPCMPEQ	(%rdi), %ymm1, %ymm1
-	VPCMPEQ	(VEC_SIZE)(%rdi), %ymm2, %ymm2
-
-	vmovdqu	(VEC_SIZE * 2)(%rsi), %ymm3
-	VPCMPEQ	(VEC_SIZE * 2)(%rdi), %ymm3, %ymm3
-	vmovdqu	(VEC_SIZE * 3)(%rsi), %ymm4
-	VPCMPEQ	(VEC_SIZE * 3)(%rdi), %ymm4, %ymm4
+	vmovdqu	(LAST_4X_OFFSET + VEC_SIZE * 2)(%LAST_4X_S2), %ymm3
+	VPCMPEQ	(LAST_4X_OFFSET + VEC_SIZE * 2)(%rdi), %ymm3, %ymm3
+	vmovdqu	(LAST_4X_OFFSET + VEC_SIZE * 3)(%LAST_4X_S2), %ymm4
+	VPCMPEQ	(LAST_4X_OFFSET + VEC_SIZE * 3)(%rdi), %ymm4, %ymm4
 
 	/* Reduce VEC0 - VEC4.  */
 	vpand	%ymm1, %ymm2, %ymm5
 	vpand	%ymm3, %ymm4, %ymm6
 	vpand	%ymm5, %ymm6, %ymm7
-	vpmovmskb %ymm7, %ecx
-	incl	%ecx
+	vpmovmskb %ymm7, %TEST_REG
+	incl	%TEST_REG
+# ifndef USE_AS_BCMP
 	jnz	L(return_vec_0_1_2_3)
+# endif
 	/* NB: eax must be zero to reach here.  */
+L(return_neq0):
+L(return_vzeroupper):
+	ZERO_UPPER_VEC_REGISTERS_RETURN
+
+# ifdef USE_AS_BCMP
+	.p2align 5
+L(last_2x_vec):
+	/* Check second to last VEC.  */
+	vmovdqu	-(VEC_SIZE * 2)(%rsi, %rdx), %ymm1
+	VPCMPEQ	-(VEC_SIZE * 2)(%rdi, %rdx), %ymm1, %ymm1
+	vpmovmskb %ymm1, %eax
+	incl	%eax
+	jnz	L(return_neq2)
+	/* Check last VEC.  */
+L(last_1x_vec):
+	vmovdqu	-(VEC_SIZE * 1)(%rsi, %rdx), %ymm1
+	VPCMPEQ	-(VEC_SIZE * 1)(%rdi, %rdx), %ymm1, %ymm1
+	vpmovmskb %ymm1, %eax
+	incl	%eax
+L(return_neq2):
 	VZEROUPPER_RETURN
+# endif
 
-	.p2align 4
+# ifndef USE_AS_BCMP
+	.p2align 4,, 8
 L(return_vec_0):
 	tzcntl	%eax, %eax
-# ifdef USE_AS_WMEMCMP
+#  ifdef USE_AS_WMEMCMP
 	movl	(%rdi, %rax), %ecx
 	xorl	%edx, %edx
 	cmpl	(%rsi, %rax), %ecx
-	/* NB: no partial register stall here because xorl zero idiom
-	   above.  */
+	/* NB: no partial register stall here because xorl zero
+	   idiom above.  */
 	setg	%dl
 	leal	-1(%rdx, %rdx), %eax
-# else
+#  else
 	movzbl	(%rsi, %rax), %ecx
 	movzbl	(%rdi, %rax), %eax
 	subl	%ecx, %eax
-# endif
-L(return_vzeroupper):
-	ZERO_UPPER_VEC_REGISTERS_RETURN
+#  endif
+	VZEROUPPER_RETURN
 
-	.p2align 4
+	.p2align 4,, 8
 L(return_vec_1):
 	tzcntl	%eax, %eax
-# ifdef USE_AS_WMEMCMP
+#  ifdef USE_AS_WMEMCMP
 	movl	VEC_SIZE(%rdi, %rax), %ecx
 	xorl	%edx, %edx
 	cmpl	VEC_SIZE(%rsi, %rax), %ecx
 	setg	%dl
 	leal	-1(%rdx, %rdx), %eax
-# else
+#  else
 	movzbl	VEC_SIZE(%rsi, %rax), %ecx
 	movzbl	VEC_SIZE(%rdi, %rax), %eax
 	subl	%ecx, %eax
-# endif
+#  endif
 	VZEROUPPER_RETURN
 
-	.p2align 4
+	.p2align 4,, 8
 L(return_vec_2):
 	tzcntl	%eax, %eax
-# ifdef USE_AS_WMEMCMP
+#  ifdef USE_AS_WMEMCMP
 	movl	(VEC_SIZE * 2)(%rdi, %rax), %ecx
 	xorl	%edx, %edx
 	cmpl	(VEC_SIZE * 2)(%rsi, %rax), %ecx
 	setg	%dl
 	leal	-1(%rdx, %rdx), %eax
-# else
+#  else
 	movzbl	(VEC_SIZE * 2)(%rsi, %rax), %ecx
 	movzbl	(VEC_SIZE * 2)(%rdi, %rax), %eax
 	subl	%ecx, %eax
-# endif
+#  endif
 	VZEROUPPER_RETURN
 
-	/* NB: p2align 5 here to ensure 4x loop is 32 byte aligned.  */
+	/* NB: p2align 5 here to ensure 4x loop is 32 byte
+	   aligned.  */
 	.p2align 5
 L(8x_return_vec_0_1_2_3):
-	/* Returning from L(more_8x_vec) requires restoring rsi.  */
+	/* Returning from L(more_8x_vec) requires restoring rsi.
+	 */
 	addq	%rdi, %rsi
 L(return_vec_0_1_2_3):
 	vpmovmskb %ymm1, %eax
@@ -219,18 +272,19 @@ L(return_vec_0_1_2_3):
 	jnz	L(return_vec_2)
 L(return_vec_3):
 	tzcntl	%ecx, %ecx
-# ifdef USE_AS_WMEMCMP
+#  ifdef USE_AS_WMEMCMP
 	movl	(VEC_SIZE * 3)(%rdi, %rcx), %eax
 	xorl	%edx, %edx
 	cmpl	(VEC_SIZE * 3)(%rsi, %rcx), %eax
 	setg	%dl
 	leal	-1(%rdx, %rdx), %eax
-# else
+#  else
 	movzbl	(VEC_SIZE * 3)(%rdi, %rcx), %eax
 	movzbl	(VEC_SIZE * 3)(%rsi, %rcx), %ecx
 	subl	%ecx, %eax
-# endif
+#  endif
 	VZEROUPPER_RETURN
+# endif
 
 	.p2align 4
 L(more_8x_vec):
@@ -243,10 +297,10 @@ L(more_8x_vec):
 	andq	$-VEC_SIZE, %rdi
 	/* Adjust because first 4x vec where check already.  */
 	subq	$-(VEC_SIZE * 4), %rdi
-	.p2align 4
+	.p2align 4,, 8
 L(loop_4x_vec):
-	/* rsi has s2 - s1 so get correct address by adding s1 (in rdi).
-	 */
+	/* rsi has s2 - s1 so get correct address by adding s1 (in
+	   rdi).  */
 	vmovdqu	(%rsi, %rdi), %ymm1
 	VPCMPEQ	(%rdi), %ymm1, %ymm1
 
@@ -262,35 +316,56 @@ L(loop_4x_vec):
 	vpand	%ymm1, %ymm2, %ymm5
 	vpand	%ymm3, %ymm4, %ymm6
 	vpand	%ymm5, %ymm6, %ymm7
-	vpmovmskb %ymm7, %ecx
-	incl	%ecx
+	vpmovmskb %ymm7, %TEST_REG
+	incl	%TEST_REG
+# ifdef USE_AS_BCMP
+	jnz	L(return_neq1)
+# else
 	jnz	L(8x_return_vec_0_1_2_3)
+# endif
 	subq	$-(VEC_SIZE * 4), %rdi
 	/* Check if s1 pointer at end.  */
 	cmpq	%rdx, %rdi
 	jb	L(loop_4x_vec)
 
 	subq	%rdx, %rdi
+# ifdef USE_AS_BCMP
+	vmovdqu	(VEC_SIZE * 3)(%rsi, %rdx), %ymm4
+	VPCMPEQ	(VEC_SIZE * 3)(%rdx), %ymm4, %ymm4
+# endif
 	/* rdi has 4 * VEC_SIZE - remaining length.  */
 	cmpl	$(VEC_SIZE * 3), %edi
 	jae	L(8x_last_1x_vec)
 	/* Load regardless of branch.  */
 	vmovdqu	(VEC_SIZE * 2)(%rsi, %rdx), %ymm3
+# ifdef USE_AS_BCMP
+	VPCMPEQ	(VEC_SIZE * 2)(%rdx), %ymm3, %ymm3
+# endif
 	cmpl	$(VEC_SIZE * 2), %edi
 	jae	L(8x_last_2x_vec)
-
 	/* Check last 4 VEC.  */
-	vmovdqu	(%rsi, %rdx), %ymm1
-	VPCMPEQ	(%rdx), %ymm1, %ymm1
-
-	vmovdqu	VEC_SIZE(%rsi, %rdx), %ymm2
-	VPCMPEQ	VEC_SIZE(%rdx), %ymm2, %ymm2
+	vmovdqu	MORE_8X_OFFSET(%rsi, %rdx), %ymm1
+	VPCMPEQ	MORE_8X_OFFSET(%rdx), %ymm1, %ymm1
 
+	vmovdqu	(VEC_SIZE - MORE_8X_OFFSET)(%rsi, %rdx), %ymm2
+	VPCMPEQ	(VEC_SIZE - MORE_8X_OFFSET)(%rdx), %ymm2, %ymm2
+# ifndef USE_AS_BCMP
 	VPCMPEQ	(VEC_SIZE * 2)(%rdx), %ymm3, %ymm3
 
 	vmovdqu	(VEC_SIZE * 3)(%rsi, %rdx), %ymm4
 	VPCMPEQ	(VEC_SIZE * 3)(%rdx), %ymm4, %ymm4
+# endif
 
+# ifdef USE_AS_BCMP
+	vpand	%ymm3, %ymm4, %ymm4
+	vpand	%ymm1, %ymm2, %ymm3
+L(8x_last_2x_vec):
+	vpand	%ymm3, %ymm4, %ymm4
+L(8x_last_1x_vec):
+	vpmovmskb %ymm4, %eax
+	/* Restore s1 pointer to rdi.  */
+	incl	%eax
+# else
 	vpand	%ymm1, %ymm2, %ymm5
 	vpand	%ymm3, %ymm4, %ymm6
 	vpand	%ymm5, %ymm6, %ymm7
@@ -299,21 +374,23 @@ L(loop_4x_vec):
 	movq	%rdx, %rdi
 	incl	%ecx
 	jnz	L(8x_return_vec_0_1_2_3)
+# endif
+L(return_neq1):
 	/* NB: eax must be zero to reach here.  */
 	VZEROUPPER_RETURN
-
+# ifndef USE_AS_BCMP
 	/* Only entry is from L(more_8x_vec).  */
-	.p2align 4
+	.p2align 4,, 8
 L(8x_last_2x_vec):
-	/* Check second to last VEC. rdx store end pointer of s1 and
-	   ymm3 has already been loaded with second to last VEC from s2.
-	 */
+	/* Check second to last VEC. rdx store end pointer of s1
+	   and ymm3 has already been loaded with second to last VEC
+	   from s2.  */
 	VPCMPEQ	(VEC_SIZE * 2)(%rdx), %ymm3, %ymm3
 	vpmovmskb %ymm3, %eax
 	incl	%eax
 	jnz	L(8x_return_vec_2)
 	/* Check last VEC.  */
-	.p2align 4
+	.p2align 4,, 8
 L(8x_last_1x_vec):
 	vmovdqu	(VEC_SIZE * 3)(%rsi, %rdx), %ymm4
 	VPCMPEQ	(VEC_SIZE * 3)(%rdx), %ymm4, %ymm4
@@ -322,7 +399,7 @@ L(8x_last_1x_vec):
 	jnz	L(8x_return_vec_3)
 	VZEROUPPER_RETURN
 
-	.p2align 4
+	.p2align 4,, 8
 L(last_2x_vec):
 	/* Check second to last VEC.  */
 	vmovdqu	-(VEC_SIZE * 2)(%rsi, %rdx), %ymm1
@@ -339,69 +416,70 @@ L(last_1x_vec):
 	jnz	L(return_vec_0_end)
 	VZEROUPPER_RETURN
 
-	.p2align 4
+	.p2align 4,, 8
 L(8x_return_vec_2):
 	subq	$VEC_SIZE, %rdx
 L(8x_return_vec_3):
 	tzcntl	%eax, %eax
 	addq	%rdx, %rax
-# ifdef USE_AS_WMEMCMP
+#  ifdef USE_AS_WMEMCMP
 	movl	(VEC_SIZE * 3)(%rax), %ecx
 	xorl	%edx, %edx
 	cmpl	(VEC_SIZE * 3)(%rsi, %rax), %ecx
 	setg	%dl
 	leal	-1(%rdx, %rdx), %eax
-# else
+#  else
 	movzbl	(VEC_SIZE * 3)(%rsi, %rax), %ecx
 	movzbl	(VEC_SIZE * 3)(%rax), %eax
 	subl	%ecx, %eax
-# endif
+#  endif
 	VZEROUPPER_RETURN
 
-	.p2align 4
+	.p2align 4,, 8
 L(return_vec_1_end):
 	tzcntl	%eax, %eax
 	addl	%edx, %eax
-# ifdef USE_AS_WMEMCMP
+#  ifdef USE_AS_WMEMCMP
 	movl	-(VEC_SIZE * 2)(%rdi, %rax), %ecx
 	xorl	%edx, %edx
 	cmpl	-(VEC_SIZE * 2)(%rsi, %rax), %ecx
 	setg	%dl
 	leal	-1(%rdx, %rdx), %eax
-# else
+#  else
 	movzbl	-(VEC_SIZE * 2)(%rsi, %rax), %ecx
 	movzbl	-(VEC_SIZE * 2)(%rdi, %rax), %eax
 	subl	%ecx, %eax
-# endif
+#  endif
 	VZEROUPPER_RETURN
 
-	.p2align 4
+	.p2align 4,, 8
 L(return_vec_0_end):
 	tzcntl	%eax, %eax
 	addl	%edx, %eax
-# ifdef USE_AS_WMEMCMP
+#  ifdef USE_AS_WMEMCMP
 	movl	-VEC_SIZE(%rdi, %rax), %ecx
 	xorl	%edx, %edx
 	cmpl	-VEC_SIZE(%rsi, %rax), %ecx
 	setg	%dl
 	leal	-1(%rdx, %rdx), %eax
-# else
+#  else
 	movzbl	-VEC_SIZE(%rsi, %rax), %ecx
 	movzbl	-VEC_SIZE(%rdi, %rax), %eax
 	subl	%ecx, %eax
-# endif
+#  endif
 	VZEROUPPER_RETURN
+# endif
 
-	.p2align 4
+	.p2align 4,, 8
 L(less_vec):
-	/* Check if one or less CHAR. This is necessary for size = 0 but
-	   is also faster for size = CHAR_SIZE.  */
+	/* Check if one or less CHAR. This is necessary for size =
+	   0 but is also faster for size = CHAR_SIZE.  */
 	cmpl	$CHAR_SIZE, %edx
 	jbe	L(one_or_less)
 
-	/* Check if loading one VEC from either s1 or s2 could cause a
-	   page cross. This can have false positives but is by far the
-	   fastest method.  */
+	/* Check if loading one VEC from either s1 or s2 could
+	   cause a page cross. This can have false positives but is
+	   by far the fastest method.  */
 	movl	%edi, %eax
 	orl	%esi, %eax
 	andl	$(PAGE_SIZE - 1), %eax
@@ -413,51 +491,93 @@ L(less_vec):
 	VPCMPEQ	(%rdi), %ymm2, %ymm2
 	vpmovmskb %ymm2, %eax
 	incl	%eax
-	/* Result will be zero if s1 and s2 match. Otherwise first set
-	   bit will be first mismatch.  */
+	/* Result will be zero if s1 and s2 match. Otherwise first
+	   set bit will be first mismatch.  */
+# ifdef USE_AS_BCMP
+	bzhil	%edx, %eax, %eax
+# else
 	bzhil	%edx, %eax, %edx
 	jnz	L(return_vec_0)
 	xorl	%eax, %eax
+# endif
 	VZEROUPPER_RETURN
 
+
+L(zero):
+	xorl	%eax, %eax
+	ret
+
+# ifdef USE_AS_WMEMCMP
+	.p2align 4,, 8
+L(one_or_less):
+	jb	L(zero)
+	movl	(%rdi), %TEST_REG
+#  ifdef USE_AS_BCMP
+	subl	(%rsi), %eax
+#  else
+	xorl	%edx, %edx
+	cmpl	(%rsi), %ecx
+	je	L(zero)
+	setg	%dl
+	leal	-1(%rdx, %rdx), %eax
+#  endif
+	/* No ymm register was touched.  */
+	ret
+# else
+	.p2align 4,, 8
+L(one_or_less):
+	jb	L(zero)
+	movzbl	(%rsi), %ecx
+	movzbl	(%rdi), %eax
+	subl	%ecx, %eax
+	/* No ymm register was touched.  */
+	ret
+# endif
+
+
 	.p2align 4
 L(page_cross_less_vec):
-	/* if USE_AS_WMEMCMP it can only be 0, 4, 8, 12, 16, 20, 24, 28
-	   bytes.  */
+	/* if USE_AS_WMEMCMP it can only be 0, 4, 8, 12, 16, 20,
+	   24, 28 bytes.  */
 	cmpl	$16, %edx
 	jae	L(between_16_31)
 # ifndef USE_AS_WMEMCMP
 	cmpl	$8, %edx
 	jae	L(between_8_15)
 	cmpl	$4, %edx
-	jae	L(between_4_7)
-
-	/* Load as big endian to avoid branches.  */
-	movzwl	(%rdi), %eax
-	movzwl	(%rsi), %ecx
-	shll	$8, %eax
-	shll	$8, %ecx
-	bswap	%eax
-	bswap	%ecx
-	movzbl	-1(%rdi, %rdx), %edi
-	movzbl	-1(%rsi, %rdx), %esi
-	orl	%edi, %eax
-	orl	%esi, %ecx
-	/* Subtraction is okay because the upper 8 bits are zero.  */
+	jb	L(between_2_3)
+#  ifdef USE_AS_BCMP
+	movl	(%rdi), %eax
+	movl	(%rsi), %ecx
 	subl	%ecx, %eax
-	/* No ymm register was touched.  */
+	jnz	L(return_neq3)
+	movl	-4(%rdi, %rdx), %ecx
+	movl	-4(%rsi, %rdx), %eax
+	subl	%ecx, %eax
+L(return_neq3):
 	ret
 
-	.p2align 4
-L(one_or_less):
-	jb	L(zero)
-	movzbl	(%rsi), %ecx
-	movzbl	(%rdi), %eax
-	subl	%ecx, %eax
+#  else
+	/* Load as big endian with overlapping movbe to avoid
+	   branches.  */
+	movbe	(%rdi), %eax
+	movbe	(%rsi), %ecx
+	shlq	$32, %rax
+	shlq	$32, %rcx
+	movbe	-4(%rdi, %rdx), %edi
+	movbe	-4(%rsi, %rdx), %esi
+	orq	%rdi, %rax
+	orq	%rsi, %rcx
+	subq	%rcx, %rax
+	jz	L(zero_4_7)
+	sbbl	%eax, %eax
+	orl	$1, %eax
+L(zero_4_7):
 	/* No ymm register was touched.  */
 	ret
+#  endif
 
-	.p2align 4
+	.p2align 4,, 8
 L(between_8_15):
 # endif
 	/* If USE_AS_WMEMCMP fall through into 8-15 byte case.  */
@@ -466,76 +586,77 @@ L(between_8_15):
 	VPCMPEQ	%xmm1, %xmm2, %xmm2
 	vpmovmskb %xmm2, %eax
 	subl	$0xffff, %eax
+# ifdef USE_AS_BCMP
+	jnz	L(return_neq4)
+	vmovq	-8(%rdi, %rdx), %xmm1
+	vmovq	-8(%rsi, %rdx), %xmm2
+# else
 	jnz	L(return_vec_0)
+
 	/* Use overlapping loads to avoid branches.  */
 	leaq	-8(%rdi, %rdx), %rdi
 	leaq	-8(%rsi, %rdx), %rsi
 	vmovq	(%rdi), %xmm1
 	vmovq	(%rsi), %xmm2
+# endif
 	VPCMPEQ	%xmm1, %xmm2, %xmm2
 	vpmovmskb %xmm2, %eax
 	subl	$0xffff, %eax
+# ifndef USE_AS_BCMP
 	jnz	L(return_vec_0)
+# endif
 	/* No ymm register was touched.  */
+L(return_neq4):
 	ret
 
-	.p2align 4
-L(zero):
-	xorl	%eax, %eax
-	ret
-
-	.p2align 4
+	.p2align 4,, 8
 L(between_16_31):
 	/* From 16 to 31 bytes.  No branch when size == 16.  */
 	vmovdqu	(%rsi), %xmm2
 	VPCMPEQ	(%rdi), %xmm2, %xmm2
 	vpmovmskb %xmm2, %eax
 	subl	$0xffff, %eax
+# ifdef USE_AS_BCMP
+	jnz	L(return_neq5)
+	/* Use overlapping loads to avoid branches.  */
+	vmovdqu	-16(%rsi, %rdx), %xmm2
+	VPCMPEQ	-16(%rdi, %rdx), %xmm2, %xmm2
+# else
 	jnz	L(return_vec_0)
-
 	/* Use overlapping loads to avoid branches.  */
-
 	vmovdqu	-16(%rsi, %rdx), %xmm2
 	leaq	-16(%rdi, %rdx), %rdi
 	leaq	-16(%rsi, %rdx), %rsi
 	VPCMPEQ	(%rdi), %xmm2, %xmm2
+# endif
 	vpmovmskb %xmm2, %eax
 	subl	$0xffff, %eax
+# ifndef USE_AS_BCMP
 	jnz	L(return_vec_0)
+# endif
+L(return_neq5):
 	/* No ymm register was touched.  */
 	ret
 
-# ifdef USE_AS_WMEMCMP
-	.p2align 4
-L(one_or_less):
-	jb	L(zero)
-	movl	(%rdi), %ecx
-	xorl	%edx, %edx
-	cmpl	(%rsi), %ecx
-	je	L(zero)
-	setg	%dl
-	leal	-1(%rdx, %rdx), %eax
-	/* No ymm register was touched.  */
-	ret
-# else
-
-	.p2align 4
-L(between_4_7):
-	/* Load as big endian with overlapping movbe to avoid branches.
+# ifndef USE_AS_WMEMCMP
+	.p2align 4,, 8
+L(between_2_3):
+	/* Load as big endian to avoid branches.  */
+	movzwl	(%rdi), %eax
+	movzwl	(%rsi), %ecx
+	shll	$8, %eax
+	shll	$8, %ecx
+#  ifndef USE_AS_BCMP
+	bswap	%eax
+	bswap	%ecx
+#  endif
+	movzbl	-1(%rdi, %rdx), %edi
+	movzbl	-1(%rsi, %rdx), %esi
+	orl	%edi, %eax
+	orl	%esi, %ecx
+	/* Subtraction is okay because the upper 8 bits are zero.
 	 */
-	movbe	(%rdi), %eax
-	movbe	(%rsi), %ecx
-	shlq	$32, %rax
-	shlq	$32, %rcx
-	movbe	-4(%rdi, %rdx), %edi
-	movbe	-4(%rsi, %rdx), %esi
-	orq	%rdi, %rax
-	orq	%rsi, %rcx
-	subq	%rcx, %rax
-	jz	L(zero_4_7)
-	sbbl	%eax, %eax
-	orl	$1, %eax
-L(zero_4_7):
+	subl	%ecx, %eax
 	/* No ymm register was touched.  */
 	ret
 # endif
-- 
2.25.1

