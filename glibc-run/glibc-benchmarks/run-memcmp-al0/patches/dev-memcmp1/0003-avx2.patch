From 611889ced799b72661b62303c4d3e64616b9051e Mon Sep 17 00:00:00 2001
From: Noah Goldstein <goldstein.w.n@gmail.com>
Date: Fri, 17 Sep 2021 01:50:08 -0500
Subject: [PATCH 3/4] avx2

---
 sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S | 322 ++++++++++---------
 1 file changed, 162 insertions(+), 160 deletions(-)

diff --git a/sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S b/sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
index 2621ec907a..3651a56c57 100644
--- a/sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
+++ b/sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
@@ -68,7 +68,7 @@
 */
 
 	.section SECTION(.text),"ax",@progbits
-ENTRY (MEMCMP)
+ENTRY_P2ALIGN (MEMCMP, 6)
 # ifdef USE_AS_WMEMCMP
 	shl	$2, %RDX_LP
 # elif defined __ILP32__
@@ -83,8 +83,8 @@ ENTRY (MEMCMP)
 	VPCMPEQ	(%rdi), %ymm1, %ymm1
 	vpmovmskb %ymm1, %eax
 	/* NB: eax must be destination register if going to
-	   L(return_vec_[0,2]). For L(return_vec_3 destination register
-	   must be ecx.  */
+	   L(return_vec_[0,2]). For L(return_vec_3 destination register must be
+	   ecx.  */
 	incl	%eax
 	jnz	L(return_vec_0)
 
@@ -95,8 +95,8 @@ ENTRY (MEMCMP)
 	vmovdqu	VEC_SIZE(%rsi), %ymm2
 	VPCMPEQ	VEC_SIZE(%rdi), %ymm2, %ymm2
 	vpmovmskb %ymm2, %eax
-	/* If all 4 VEC where equal eax will be all 1s so incl will
-	   overflow and set zero flag.  */
+	/* If all 4 VEC where equal eax will be all 1s so incl will overflow
+	   and set zero flag.  */
 	incl	%eax
 	jnz	L(return_vec_1)
 
@@ -129,8 +129,8 @@ ENTRY (MEMCMP)
 	leaq	-(4 * VEC_SIZE)(%rdi, %rdx), %rdi
 	leaq	-(4 * VEC_SIZE)(%rsi, %rdx), %rsi
 
-	/* Wait to load from s1 until addressed adjust due to
-	   unlamination of microfusion with complex address mode.  */
+	/* Wait to load from s1 until addressed adjust due to unlamination
+	   of microfusion with complex address mode.  */
 	VPCMPEQ	(%rdi), %ymm1, %ymm1
 	VPCMPEQ	(VEC_SIZE)(%rdi), %ymm2, %ymm2
 
@@ -149,6 +149,107 @@ ENTRY (MEMCMP)
 	/* NB: eax must be zero to reach here.  */
 	VZEROUPPER_RETURN
 
+L(return_vec_1_end):
+	tzcntl	%eax, %eax
+	addl	%edx, %eax
+# ifdef USE_AS_WMEMCMP
+	movl	-(VEC_SIZE * 2)(%rdi, %rax), %ecx
+	xorl	%edx, %edx
+	cmpl	-(VEC_SIZE * 2)(%rsi, %rax), %ecx
+	setg	%dl
+	leal	-1(%rdx, %rdx), %eax
+# else
+	movzbl	-(VEC_SIZE * 2)(%rsi, %rax), %ecx
+	movzbl	-(VEC_SIZE * 2)(%rdi, %rax), %eax
+	subl	%ecx, %eax
+# endif
+	VZEROUPPER_RETURN
+
+
+	.p2align 4
+L(last_2x_vec):
+	/* Check second to last VEC.  */
+	vmovdqu	-(VEC_SIZE * 2)(%rsi, %rdx), %ymm1
+	VPCMPEQ	-(VEC_SIZE * 2)(%rdi, %rdx), %ymm1, %ymm1
+	vpmovmskb %ymm1, %eax
+	incl	%eax
+	jnz	L(return_vec_1_end)
+	/* Check last VEC.  */
+L(last_1x_vec):
+	vmovdqu	-(VEC_SIZE * 1)(%rsi, %rdx), %ymm1
+	VPCMPEQ	-(VEC_SIZE * 1)(%rdi, %rdx), %ymm1, %ymm1
+	vpmovmskb %ymm1, %eax
+	incl	%eax
+	jnz	L(return_vec_0_end)
+	VZEROUPPER_RETURN
+
+	.p2align 4
+L(return_vec_0_end):
+	tzcntl	%eax, %eax
+	addl	%edx, %eax
+# ifdef USE_AS_WMEMCMP
+	movl	-VEC_SIZE(%rdi, %rax), %ecx
+	xorl	%edx, %edx
+	cmpl	-VEC_SIZE(%rsi, %rax), %ecx
+	setg	%dl
+	leal	-1(%rdx, %rdx), %eax
+# else
+	movzbl	-VEC_SIZE(%rsi, %rax), %ecx
+	movzbl	-VEC_SIZE(%rdi, %rax), %eax
+	subl	%ecx, %eax
+# endif
+	VZEROUPPER_RETURN
+	.p2align 4
+L(less_vec):
+	/* Check if one or less CHAR. This is necessary for size = 0 but is
+	   also faster for size = CHAR_SIZE.  */
+	cmpl	$CHAR_SIZE, %edx
+	jbe	L(one_or_less)
+
+	/* Check if loading one VEC from either s1 or s2 could cause a page
+	   cross. This can have false positives but is by far the fastest
+	   method.  */
+	movl	%edi, %eax
+	orl	%esi, %eax
+	andl	$(PAGE_SIZE - 1), %eax
+	cmpl	$(PAGE_SIZE - VEC_SIZE), %eax
+	jg	L(page_cross_less_vec)
+
+	/* No page cross possible.  */
+	vmovdqu	(%rsi), %ymm2
+	VPCMPEQ	(%rdi), %ymm2, %ymm2
+	vpmovmskb %ymm2, %eax
+	incl	%eax
+	/* Result will be zero if s1 and s2 match. Otherwise first set bit
+	   will be first mismatch.  */
+	bzhil	%edx, %eax, %eax
+	jnz	L(return_vec_0)
+	VZEROUPPER_RETURN
+
+# ifdef USE_AS_WMEMCMP
+L(one_or_less):
+	jb	L(zero)
+	movl	(%rdi), %ecx
+	xorl	%edx, %edx
+	cmpl	(%rsi), %ecx
+	je	L(zero)
+	setg	%dl
+	leal	-1(%rdx, %rdx), %eax
+	/* No ymm register was touched.  */
+	ret
+# else
+L(one_or_less):
+	jb	L(zero)
+	movzbl	(%rsi), %ecx
+	movzbl	(%rdi), %eax
+	subl	%ecx, %eax
+	/* No ymm register was touched.  */
+	ret
+# endif
+L(zero):
+	xorl	%eax, %eax
+	ret
+
 	.p2align 4
 L(return_vec_0):
 	tzcntl	%eax, %eax
@@ -156,8 +257,8 @@ L(return_vec_0):
 	movl	(%rdi, %rax), %ecx
 	xorl	%edx, %edx
 	cmpl	(%rsi, %rax), %ecx
-	/* NB: no partial register stall here because xorl zero idiom
-	   above.  */
+	/* NB: no partial register stall here because xorl zero idiom above.
+	 */
 	setg	%dl
 	leal	-1(%rdx, %rdx), %eax
 # else
@@ -165,10 +266,9 @@ L(return_vec_0):
 	movzbl	(%rdi, %rax), %eax
 	subl	%ecx, %eax
 # endif
-L(return_vzeroupper):
-	ZERO_UPPER_VEC_REGISTERS_RETURN
+	VZEROUPPER_RETURN
 
-	.p2align 4
+	.p2align 4,, 10
 L(return_vec_1):
 	tzcntl	%eax, %eax
 # ifdef USE_AS_WMEMCMP
@@ -184,7 +284,7 @@ L(return_vec_1):
 # endif
 	VZEROUPPER_RETURN
 
-	.p2align 4
+	.p2align 4,, 9
 L(return_vec_2):
 	tzcntl	%eax, %eax
 # ifdef USE_AS_WMEMCMP
@@ -200,8 +300,7 @@ L(return_vec_2):
 # endif
 	VZEROUPPER_RETURN
 
-	/* NB: p2align 5 here to ensure 4x loop is 32 byte aligned.  */
-	.p2align 5
+	.p2align 4,, 10
 L(8x_return_vec_0_1_2_3):
 	/* Returning from L(more_8x_vec) requires restoring rsi.  */
 	addq	%rdi, %rsi
@@ -217,6 +316,7 @@ L(return_vec_0_1_2_3):
 	vpmovmskb %ymm3, %eax
 	incl	%eax
 	jnz	L(return_vec_2)
+	.p2align 4,, 4
 L(return_vec_3):
 	tzcntl	%ecx, %ecx
 # ifdef USE_AS_WMEMCMP
@@ -230,14 +330,22 @@ L(return_vec_3):
 	movzbl	(VEC_SIZE * 3)(%rsi, %rcx), %ecx
 	subl	%ecx, %eax
 # endif
-	VZEROUPPER_RETURN
+L(return_vzeroupper):
+	ZERO_UPPER_VEC_REGISTERS_RETURN
+
+
+
+
+
+
+
 
 	.p2align 4
 L(more_8x_vec):
 	/* Set end of s1 in rdx.  */
 	leaq	-(VEC_SIZE * 4)(%rdi, %rdx), %rdx
-	/* rsi stores s2 - s1. This allows loop to only update one
-	   pointer.  */
+	/* rsi stores s2 - s1. This allows loop to only update one pointer.
+	 */
 	subq	%rdi, %rsi
 	/* Align s1 pointer.  */
 	andq	$-VEC_SIZE, %rdi
@@ -245,8 +353,7 @@ L(more_8x_vec):
 	subq	$-(VEC_SIZE * 4), %rdi
 	.p2align 4
 L(loop_4x_vec):
-	/* rsi has s2 - s1 so get correct address by adding s1 (in rdi).
-	 */
+	/* rsi has s2 - s1 so get correct address by adding s1 (in rdi).  */
 	vmovdqu	(%rsi, %rdi), %ymm1
 	VPCMPEQ	(%rdi), %ymm1, %ymm1
 
@@ -305,9 +412,8 @@ L(loop_4x_vec):
 	/* Only entry is from L(more_8x_vec).  */
 	.p2align 4
 L(8x_last_2x_vec):
-	/* Check second to last VEC. rdx store end pointer of s1 and
-	   ymm3 has already been loaded with second to last VEC from s2.
-	 */
+	/* Check second to last VEC. rdx store end pointer of s1 and ymm3
+	   has already been loaded with second to last VEC from s2.  */
 	VPCMPEQ	(VEC_SIZE * 2)(%rdx), %ymm3, %ymm3
 	vpmovmskb %ymm3, %eax
 	incl	%eax
@@ -322,22 +428,6 @@ L(8x_last_1x_vec):
 	jnz	L(8x_return_vec_3)
 	VZEROUPPER_RETURN
 
-	.p2align 4
-L(last_2x_vec):
-	/* Check second to last VEC.  */
-	vmovdqu	-(VEC_SIZE * 2)(%rsi, %rdx), %ymm1
-	VPCMPEQ	-(VEC_SIZE * 2)(%rdi, %rdx), %ymm1, %ymm1
-	vpmovmskb %ymm1, %eax
-	incl	%eax
-	jnz	L(return_vec_1_end)
-	/* Check last VEC.  */
-L(last_1x_vec):
-	vmovdqu	-(VEC_SIZE * 1)(%rsi, %rdx), %ymm1
-	VPCMPEQ	-(VEC_SIZE * 1)(%rdi, %rdx), %ymm1, %ymm1
-	vpmovmskb %ymm1, %eax
-	incl	%eax
-	jnz	L(return_vec_0_end)
-	VZEROUPPER_RETURN
 
 	.p2align 4
 L(8x_return_vec_2):
@@ -358,69 +448,8 @@ L(8x_return_vec_3):
 # endif
 	VZEROUPPER_RETURN
 
-	.p2align 4
-L(return_vec_1_end):
-	tzcntl	%eax, %eax
-	addl	%edx, %eax
-# ifdef USE_AS_WMEMCMP
-	movl	-(VEC_SIZE * 2)(%rdi, %rax), %ecx
-	xorl	%edx, %edx
-	cmpl	-(VEC_SIZE * 2)(%rsi, %rax), %ecx
-	setg	%dl
-	leal	-1(%rdx, %rdx), %eax
-# else
-	movzbl	-(VEC_SIZE * 2)(%rsi, %rax), %ecx
-	movzbl	-(VEC_SIZE * 2)(%rdi, %rax), %eax
-	subl	%ecx, %eax
-# endif
-	VZEROUPPER_RETURN
-
-	.p2align 4
-L(return_vec_0_end):
-	tzcntl	%eax, %eax
-	addl	%edx, %eax
-# ifdef USE_AS_WMEMCMP
-	movl	-VEC_SIZE(%rdi, %rax), %ecx
-	xorl	%edx, %edx
-	cmpl	-VEC_SIZE(%rsi, %rax), %ecx
-	setg	%dl
-	leal	-1(%rdx, %rdx), %eax
-# else
-	movzbl	-VEC_SIZE(%rsi, %rax), %ecx
-	movzbl	-VEC_SIZE(%rdi, %rax), %eax
-	subl	%ecx, %eax
-# endif
-	VZEROUPPER_RETURN
-
-	.p2align 4
-L(less_vec):
-	/* Check if one or less CHAR. This is necessary for size = 0 but
-	   is also faster for size = CHAR_SIZE.  */
-	cmpl	$CHAR_SIZE, %edx
-	jbe	L(one_or_less)
 
-	/* Check if loading one VEC from either s1 or s2 could cause a
-	   page cross. This can have false positives but is by far the
-	   fastest method.  */
-	movl	%edi, %eax
-	orl	%esi, %eax
-	andl	$(PAGE_SIZE - 1), %eax
-	cmpl	$(PAGE_SIZE - VEC_SIZE), %eax
-	jg	L(page_cross_less_vec)
-
-	/* No page cross possible.  */
-	vmovdqu	(%rsi), %ymm2
-	VPCMPEQ	(%rdi), %ymm2, %ymm2
-	vpmovmskb %ymm2, %eax
-	incl	%eax
-	/* Result will be zero if s1 and s2 match. Otherwise first set
-	   bit will be first mismatch.  */
-	bzhil	%edx, %eax, %edx
-	jnz	L(return_vec_0)
-	xorl	%eax, %eax
-	VZEROUPPER_RETURN
-
-	.p2align 4
+	.p2align 5
 L(page_cross_less_vec):
 	/* if USE_AS_WMEMCMP it can only be 0, 4, 8, 12, 16, 20, 24, 28
 	   bytes.  */
@@ -430,30 +459,22 @@ L(page_cross_less_vec):
 	cmpl	$8, %edx
 	jae	L(between_8_15)
 	cmpl	$4, %edx
-	jae	L(between_4_7)
+	jb	L(between_2_3)
 
-	/* Load as big endian to avoid branches.  */
-	movzwl	(%rdi), %eax
-	movzwl	(%rsi), %ecx
-	shll	$8, %eax
-	shll	$8, %ecx
-	bswap	%eax
-	bswap	%ecx
-	movzbl	-1(%rdi, %rdx), %edi
-	movzbl	-1(%rsi, %rdx), %esi
-	orl	%edi, %eax
-	orl	%esi, %ecx
-	/* Subtraction is okay because the upper 8 bits are zero.  */
-	subl	%ecx, %eax
-	/* No ymm register was touched.  */
-	ret
-
-	.p2align 4
-L(one_or_less):
-	jb	L(zero)
-	movzbl	(%rsi), %ecx
-	movzbl	(%rdi), %eax
-	subl	%ecx, %eax
+	/* Load as big endian with overlapping movbe to avoid branches.  */
+	movbe	(%rdi), %eax
+	movbe	(%rsi), %ecx
+	shlq	$32, %rax
+	shlq	$32, %rcx
+	movbe	-4(%rdi, %rdx), %edi
+	movbe	-4(%rsi, %rdx), %esi
+	orq	%rdi, %rax
+	orq	%rsi, %rcx
+	subq	%rcx, %rax
+	jz	L(zero_4_7)
+	sbbl	%eax, %eax
+	orl	$1, %eax
+L(zero_4_7):
 	/* No ymm register was touched.  */
 	ret
 
@@ -479,12 +500,7 @@ L(between_8_15):
 	/* No ymm register was touched.  */
 	ret
 
-	.p2align 4
-L(zero):
-	xorl	%eax, %eax
-	ret
-
-	.p2align 4
+	.p2align 4,, 10
 L(between_16_31):
 	/* From 16 to 31 bytes.  No branch when size == 16.  */
 	vmovdqu	(%rsi), %xmm2
@@ -505,39 +521,25 @@ L(between_16_31):
 	/* No ymm register was touched.  */
 	ret
 
-# ifdef USE_AS_WMEMCMP
-	.p2align 4
-L(one_or_less):
-	jb	L(zero)
-	movl	(%rdi), %ecx
-	xorl	%edx, %edx
-	cmpl	(%rsi), %ecx
-	je	L(zero)
-	setg	%dl
-	leal	-1(%rdx, %rdx), %eax
+# ifndef USE_AS_WMEMCMP
+	.p2align 4,, 8
+L(between_2_3):
+	/* Load as big endian to avoid branches.  */
+	movzwl	(%rdi), %eax
+	movzwl	(%rsi), %ecx
+	shll	$8, %eax
+	shll	$8, %ecx
+	bswap	%eax
+	bswap	%ecx
+	movzbl	-1(%rdi, %rdx), %edi
+	movzbl	-1(%rsi, %rdx), %esi
+	orl	%edi, %eax
+	orl	%esi, %ecx
+	/* Subtraction is okay because the upper 8 bits are zero.  */
+	subl	%ecx, %eax
 	/* No ymm register was touched.  */
 	ret
-# else
 
-	.p2align 4
-L(between_4_7):
-	/* Load as big endian with overlapping movbe to avoid branches.
-	 */
-	movbe	(%rdi), %eax
-	movbe	(%rsi), %ecx
-	shlq	$32, %rax
-	shlq	$32, %rcx
-	movbe	-4(%rdi, %rdx), %edi
-	movbe	-4(%rsi, %rdx), %esi
-	orq	%rdi, %rax
-	orq	%rsi, %rcx
-	subq	%rcx, %rax
-	jz	L(zero_4_7)
-	sbbl	%eax, %eax
-	orl	$1, %eax
-L(zero_4_7):
-	/* No ymm register was touched.  */
-	ret
 # endif
 
 END (MEMCMP)
-- 
2.25.1

