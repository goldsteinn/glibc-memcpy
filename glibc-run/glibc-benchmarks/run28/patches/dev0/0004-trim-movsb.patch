From 288cf4b2acbf9130fb7633b4dcb047b50466c2b1 Mon Sep 17 00:00:00 2001
From: Noah Goldstein <goldstein.w.n@gmail.com>
Date: Wed, 8 Sep 2021 02:25:18 -0400
Subject: [PATCH 04/10] trim movsb

---
 .../multiarch/memmove-vec-unaligned-erms.S    | 63 +++++++++++--------
 1 file changed, 38 insertions(+), 25 deletions(-)

diff --git a/sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S b/sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
index 1adee8671f..43a7922303 100644
--- a/sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
+++ b/sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
@@ -339,40 +339,36 @@ L(copy_8_15):
 
 #if defined USE_MULTIARCH && IS_IN (libc)
 L(movsb):
-	cmp	__x86_rep_movsb_stop_threshold(%rip), %RDX_LP
-	jae	L(more_8x_vec)
-	cmpq	%rsi, %rdi
-	jb	1f
-	/* Source == destination is less common.  */
-	je	L(nop)
-	leaq	(%rsi, %rdx), %r9
-	cmpq	%r9, %rdi
-	/* Avoid slow backward REP MOVSB.  */
-	jb	L(more_8x_vec_backward)
-# if AVOID_SHORT_DISTANCE_REP_MOVSB
-	testl	$X86_STRING_CONTROL_AVOID_SHORT_DISTANCE_REP_MOVSB, __x86_string_control(%rip)
-	jz	3f
 	movq	%rdi, %rcx
 	subq	%rsi, %rcx
-	jmp	2f
-# endif
-1:
+	/* Go to backwards temporal copy if overlap no matter what as
+	   backward REP MOVSB is slow and we don't want to use NT stores if
+	   there is overlap.  */
+	cmpq	%rdx, %rcx
+	/* L(more_8x_vec_backward_check_nop) checks for src == dst.  */
+	jb	L(more_8x_vec_backward_check_nop)
+
+	/* If above x86_rep_movsb_stop_threshold most likely is candidate
+	   for NT moves aswell.  */
+	cmp	__x86_rep_movsb_stop_threshold(%rip), %RDX_LP
+	jae	L(large_memcpy_2x_check)
 # if AVOID_SHORT_DISTANCE_REP_MOVSB
+	/* Only avoid short movsb if CPU has FSRM.  */
 	testl	$X86_STRING_CONTROL_AVOID_SHORT_DISTANCE_REP_MOVSB, __x86_string_control(%rip)
-	jz	3f
-	movq	%rsi, %rcx
-	subq	%rdi, %rcx
-2:
+	jz	L(skip_short_movsb_check)
 	/* Avoid "rep movsb" if RCX, the distance between source and
 	   destination, is N*4GB + [1..63] with N >= 0.  */
-	cmpl	$63, %ecx
-	/* Avoid "rep movsb" if ECX <= 63.  */
-	jbe	L(more_2x_vec)
-3:
+
+	/* ecx contains dst - src. Early check for backward copy
+	   conditions means only case of slow movsb with src = dst + [0, 63]
+	   is ecx in [-63, 0]. Use unsigned comparison with -64 check for
+	   that case.  */
+	cmpl	$-64, %ecx
+	ja	L(more_8x_vec_forward)
+L(skip_short_movsb_check):
 # endif
 	mov	%RDX_LP, %RCX_LP
 	rep	movsb
-L(nop):
 	ret
 
 L(movsb_more_2x_vec):
@@ -414,6 +410,8 @@ L(last_4x_vec):
 	VMOVU	%VEC(1), VEC_SIZE(%rdi)
 	VMOVU	%VEC(2), -VEC_SIZE(%rdi, %rdx)
 	VMOVU	%VEC(3), -(VEC_SIZE * 2)(%rdi, %rdx)
+	/* Keep L(nop) target close to jmp for 2-byte encoding.  */
+L(nop):
 	VZEROUPPER_RETURN
 
 L(more_8x_vec):
@@ -428,6 +426,8 @@ L(more_8x_vec_check):
 	ja	L(more_8x_vec_backward)
 	/* Source == destination is less common.  */
 	je	L(nop)
+	/* Entry if avoiding short distance movsb.  */
+L(more_8x_vec_forward):
 	/* Load the first VEC and last 4 * VEC to support overlapping
 	   addresses.  */
 	VMOVU	(%rsi), %VEC(4)
@@ -475,7 +475,14 @@ L(loop_4x_vec_forward):
 	/* Store the first VEC.  */
 	VMOVU	%VEC(4), (%r11)
 	VZEROUPPER_RETURN
+	/* Keep L(nop_backward) target close to jmp for 2-byte encoding.
+	 */
+L(nop_backward):
+	VZEROUPPER_RETURN
 
+L(more_8x_vec_backward_check_nop):
+	testq	%rcx, %rcx
+	jz	L(nop_backward)
 L(more_8x_vec_backward):
 	/* Load the first 4 * VEC and last VEC to support overlapping
 	   addresses.  */
@@ -525,6 +532,12 @@ L(loop_4x_vec_backward):
 	VZEROUPPER_RETURN
 
 	.p2align 4
+#if defined USE_MULTIARCH && IS_IN (libc)
+	.p2align 4
+L(large_memcpy_2x_check):
+	cmp	__x86_shared_non_temporal_threshold(%rip), %RDX_LP
+	jb	L(more_8x_vec_check)
+#endif
 L(large_memcpy_2x):
 	/* Compute absolute value of difference between source and
 	   destination.  */
-- 
2.25.1

