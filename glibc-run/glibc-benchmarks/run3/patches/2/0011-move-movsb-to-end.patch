From 0aa0f148fb9677a4a0c0441c4af1463631b3c9ce Mon Sep 17 00:00:00 2001
From: Noah Goldstein <goldstein.w.n@gmail.com>
Date: Mon, 23 Aug 2021 00:44:07 -0400
Subject: [PATCH 11/11] move movsb to end

---
 .../multiarch/memmove-vec-unaligned-erms.S    | 54 +++++++++----------
 1 file changed, 27 insertions(+), 27 deletions(-)

diff --git a/sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S b/sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
index 614486bcef..e1268aca95 100644
--- a/sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
+++ b/sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
@@ -449,34 +449,16 @@ L(last_4x_vec):
 	VMOVU	%VEC(1), VEC_SIZE(%rdi)
 	VMOVU	%VEC(2), -VEC_SIZE(%rdi, %rdx)
 	VMOVU	%VEC(3), -(VEC_SIZE * 2)(%rdi, %rdx)
-#if !defined USE_MULTIARCH || !IS_IN (libc)
 L(nop):
-#endif
 	VZEROUPPER_RETURN
-
-#if defined USE_MULTIARCH && IS_IN (libc)
-	.p2align 4
-L(movsb):
-	movq	%rdi, %rcx
-	subq	%rsi, %rcx
-	cmpq	%rdx, %rcx
-	jb	L(more_8x_vec_backward_check_nop)
-	cmp	__x86_rep_movsb_stop_threshold(%rip), %RDX_LP
-	jae	L(more_8x_vec)
-# if AVOID_SHORT_DISTANCE_REP_MOVSB
-	andl	$X86_STRING_CONTROL_AVOID_SHORT_DISTANCE_REP_MOVSB, __x86_string_control(%rip)
-	jz	L(skip_short_movsb_check)
-	cmpl	$-64, %ecx
-	jae	L(more_8x_vec_forward)
-L(skip_short_movsb_check):
-# endif
-	mov	%RDX_LP, %RCX_LP
-	rep	movsb
-L(nop):
-	ret
+#if VEC_SIZE == 32
+    .p2align 4
+    nop
+    .p2align 4
+#else
+	.p2align 4,, 10
 #endif
 
-	.p2align 4,, 10
 L(more_8x_vec):
 	/* Check if non-temporal move candidate.  */
 #if (defined USE_MULTIARCH || VEC_SIZE == 16) && IS_IN (libc)
@@ -575,16 +557,34 @@ L(loop_4x_vec_backward):
 	VMOVU	%VEC(8), -VEC_SIZE(%rdx, %rcx)
 	VZEROUPPER_RETURN
 
+    
+#if defined USE_MULTIARCH && IS_IN (libc)
+	.p2align 4
+L(movsb):
+	movq	%rdi, %rcx
+	subq	%rsi, %rcx
+	cmpq	%rdx, %rcx
+	jb	L(more_8x_vec_backward_check_nop)
+	cmp	__x86_rep_movsb_stop_threshold(%rip), %RDX_LP
+	jae	L(large_memcpy_2x_check)
+# if AVOID_SHORT_DISTANCE_REP_MOVSB
+	andl	$X86_STRING_CONTROL_AVOID_SHORT_DISTANCE_REP_MOVSB, __x86_string_control(%rip)
+	jz	L(skip_short_movsb_check)
+	cmpl	$-64, %ecx
+	jae	L(more_8x_vec_forward)
+L(skip_short_movsb_check):
+# endif
+	mov	%RDX_LP, %RCX_LP
+	rep	movsb
+	ret
+#endif
 
 
 #if (defined USE_MULTIARCH || VEC_SIZE == 16) && IS_IN (libc)
 	.p2align 4
 L(large_memcpy_2x_check):
-# if (defined USE_MULTIARCH || VEC_SIZE == 16) && IS_IN (libc)
-	/* Check non-temporal store threshold.  */
 	cmp	__x86_shared_non_temporal_threshold(%rip), %RDX_LP
 	jb	L(more_8x_vec_check)
-# endif
 L(large_memcpy_2x):
 
 	/* Compute absolute value of difference between source and destination.
-- 
2.25.1

