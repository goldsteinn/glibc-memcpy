From 74bbe70c38237ff146a65270708c6e54546c87cf Mon Sep 17 00:00:00 2001
From: Noah Goldstein <goldstein.w.n@gmail.com>
Date: Sat, 18 Sep 2021 03:02:48 -0500
Subject: [PATCH 6/9] run2

---
 sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S | 137 ++++----
 sysdeps/x86_64/multiarch/memcmp-evex-movbe.S | 318 ++++++++++---------
 2 files changed, 232 insertions(+), 223 deletions(-)

diff --git a/sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S b/sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
index 3651a56c57..a52e8ee197 100644
--- a/sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
+++ b/sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
@@ -148,9 +148,9 @@ ENTRY_P2ALIGN (MEMCMP, 6)
 	jnz	L(return_vec_0_1_2_3)
 	/* NB: eax must be zero to reach here.  */
 	VZEROUPPER_RETURN
-
+	.p2align 4,, 10
 L(return_vec_1_end):
-	tzcntl	%eax, %eax
+	bsfl	%eax, %eax
 	addl	%edx, %eax
 # ifdef USE_AS_WMEMCMP
 	movl	-(VEC_SIZE * 2)(%rdi, %rax), %ecx
@@ -166,6 +166,7 @@ L(return_vec_1_end):
 	VZEROUPPER_RETURN
 
 
+
 	.p2align 4
 L(last_2x_vec):
 	/* Check second to last VEC.  */
@@ -183,22 +184,33 @@ L(last_1x_vec):
 	jnz	L(return_vec_0_end)
 	VZEROUPPER_RETURN
 
-	.p2align 4
-L(return_vec_0_end):
-	tzcntl	%eax, %eax
-	addl	%edx, %eax
+
+	.p2align 4,, 13
 # ifdef USE_AS_WMEMCMP
-	movl	-VEC_SIZE(%rdi, %rax), %ecx
+L(one_or_less):
+	jb	L(zero)
+	movl	(%rdi), %ecx
 	xorl	%edx, %edx
-	cmpl	-VEC_SIZE(%rsi, %rax), %ecx
+	cmpl	(%rsi), %ecx
+	je	L(zero)
 	setg	%dl
 	leal	-1(%rdx, %rdx), %eax
+	/* No ymm register was touched.  */
+	ret
 # else
-	movzbl	-VEC_SIZE(%rsi, %rax), %ecx
-	movzbl	-VEC_SIZE(%rdi, %rax), %eax
+L(one_or_less):
+	jb	L(zero)
+	movzbl	(%rsi), %ecx
+	movzbl	(%rdi), %eax
 	subl	%ecx, %eax
+	/* No ymm register was touched.  */
+	ret
 # endif
-	VZEROUPPER_RETURN
+
+L(zero):
+	xorl	%eax, %eax
+	ret
+
 	.p2align 4
 L(less_vec):
 	/* Check if one or less CHAR. This is necessary for size = 0 but is
@@ -213,7 +225,7 @@ L(less_vec):
 	orl	%esi, %eax
 	andl	$(PAGE_SIZE - 1), %eax
 	cmpl	$(PAGE_SIZE - VEC_SIZE), %eax
-	jg	L(page_cross_less_vec)
+	ja	L(page_cross_less_vec)
 
 	/* No page cross possible.  */
 	vmovdqu	(%rsi), %ymm2
@@ -225,34 +237,25 @@ L(less_vec):
 	bzhil	%edx, %eax, %eax
 	jnz	L(return_vec_0)
 	VZEROUPPER_RETURN
-
+	.p2align 4,, 10
+L(return_vec_2):
+	bsfl	%eax, %eax
 # ifdef USE_AS_WMEMCMP
-L(one_or_less):
-	jb	L(zero)
-	movl	(%rdi), %ecx
+	movl	(VEC_SIZE * 2)(%rdi, %rax), %ecx
 	xorl	%edx, %edx
-	cmpl	(%rsi), %ecx
-	je	L(zero)
+	cmpl	(VEC_SIZE * 2)(%rsi, %rax), %ecx
 	setg	%dl
 	leal	-1(%rdx, %rdx), %eax
-	/* No ymm register was touched.  */
-	ret
 # else
-L(one_or_less):
-	jb	L(zero)
-	movzbl	(%rsi), %ecx
-	movzbl	(%rdi), %eax
+	movzbl	(VEC_SIZE * 2)(%rsi, %rax), %ecx
+	movzbl	(VEC_SIZE * 2)(%rdi, %rax), %eax
 	subl	%ecx, %eax
-	/* No ymm register was touched.  */
-	ret
 # endif
-L(zero):
-	xorl	%eax, %eax
-	ret
+	VZEROUPPER_RETURN
 
-	.p2align 4
+	.p2align 4,, 10
 L(return_vec_0):
-	tzcntl	%eax, %eax
+	bsfl	%eax, %eax
 # ifdef USE_AS_WMEMCMP
 	movl	(%rdi, %rax), %ecx
 	xorl	%edx, %edx
@@ -267,39 +270,42 @@ L(return_vec_0):
 	subl	%ecx, %eax
 # endif
 	VZEROUPPER_RETURN
-
-	.p2align 4,, 10
+	.p2align 4,, 4
 L(return_vec_1):
-	tzcntl	%eax, %eax
+	bsfl	%eax, %eax
 # ifdef USE_AS_WMEMCMP
-	movl	VEC_SIZE(%rdi, %rax), %ecx
+	movl	(VEC_SIZE * 1)(%rdi, %rax), %ecx
 	xorl	%edx, %edx
-	cmpl	VEC_SIZE(%rsi, %rax), %ecx
+	cmpl	(VEC_SIZE * 1)(%rsi, %rax), %ecx
 	setg	%dl
 	leal	-1(%rdx, %rdx), %eax
 # else
-	movzbl	VEC_SIZE(%rsi, %rax), %ecx
-	movzbl	VEC_SIZE(%rdi, %rax), %eax
+	movzbl	(VEC_SIZE * 1)(%rsi, %rax), %ecx
+	movzbl	(VEC_SIZE * 1)(%rdi, %rax), %eax
 	subl	%ecx, %eax
 # endif
 	VZEROUPPER_RETURN
 
-	.p2align 4,, 9
-L(return_vec_2):
-	tzcntl	%eax, %eax
+	.p2align 4,, 4
+L(return_vec_0_end):
+	bsfl	%eax, %eax
+	addl	%edx, %eax
 # ifdef USE_AS_WMEMCMP
-	movl	(VEC_SIZE * 2)(%rdi, %rax), %ecx
+	movl	-VEC_SIZE(%rdi, %rax), %ecx
 	xorl	%edx, %edx
-	cmpl	(VEC_SIZE * 2)(%rsi, %rax), %ecx
+	cmpl	-VEC_SIZE(%rsi, %rax), %ecx
 	setg	%dl
 	leal	-1(%rdx, %rdx), %eax
 # else
-	movzbl	(VEC_SIZE * 2)(%rsi, %rax), %ecx
-	movzbl	(VEC_SIZE * 2)(%rdi, %rax), %eax
+	movzbl	-VEC_SIZE(%rsi, %rax), %ecx
+	movzbl	-VEC_SIZE(%rdi, %rax), %eax
 	subl	%ecx, %eax
 # endif
 	VZEROUPPER_RETURN
 
+
+
+
 	.p2align 4,, 10
 L(8x_return_vec_0_1_2_3):
 	/* Returning from L(more_8x_vec) requires restoring rsi.  */
@@ -334,12 +340,6 @@ L(return_vzeroupper):
 	ZERO_UPPER_VEC_REGISTERS_RETURN
 
 
-
-
-
-
-
-
 	.p2align 4
 L(more_8x_vec):
 	/* Set end of s1 in rdx.  */
@@ -381,11 +381,16 @@ L(loop_4x_vec):
 	/* rdi has 4 * VEC_SIZE - remaining length.  */
 	cmpl	$(VEC_SIZE * 3), %edi
 	jae	L(8x_last_1x_vec)
+
 	/* Load regardless of branch.  */
 	vmovdqu	(VEC_SIZE * 2)(%rsi, %rdx), %ymm3
+	VPCMPEQ	(VEC_SIZE * 2)(%rdx), %ymm3, %ymm3
 	cmpl	$(VEC_SIZE * 2), %edi
 	jae	L(8x_last_2x_vec)
 
+	vmovdqu	(VEC_SIZE * 3)(%rsi, %rdx), %ymm4
+	VPCMPEQ	(VEC_SIZE * 3)(%rdx), %ymm4, %ymm4
+
 	/* Check last 4 VEC.  */
 	vmovdqu	(%rsi, %rdx), %ymm1
 	VPCMPEQ	(%rdx), %ymm1, %ymm1
@@ -393,10 +398,6 @@ L(loop_4x_vec):
 	vmovdqu	VEC_SIZE(%rsi, %rdx), %ymm2
 	VPCMPEQ	VEC_SIZE(%rdx), %ymm2, %ymm2
 
-	VPCMPEQ	(VEC_SIZE * 2)(%rdx), %ymm3, %ymm3
-
-	vmovdqu	(VEC_SIZE * 3)(%rsi, %rdx), %ymm4
-	VPCMPEQ	(VEC_SIZE * 3)(%rdx), %ymm4, %ymm4
 
 	vpand	%ymm1, %ymm2, %ymm5
 	vpand	%ymm3, %ymm4, %ymm6
@@ -410,16 +411,16 @@ L(loop_4x_vec):
 	VZEROUPPER_RETURN
 
 	/* Only entry is from L(more_8x_vec).  */
-	.p2align 4
+	.p2align 4,, 10
 L(8x_last_2x_vec):
 	/* Check second to last VEC. rdx store end pointer of s1 and ymm3
 	   has already been loaded with second to last VEC from s2.  */
-	VPCMPEQ	(VEC_SIZE * 2)(%rdx), %ymm3, %ymm3
+
 	vpmovmskb %ymm3, %eax
 	incl	%eax
 	jnz	L(8x_return_vec_2)
 	/* Check last VEC.  */
-	.p2align 4
+	.p2align 4,, 6
 L(8x_last_1x_vec):
 	vmovdqu	(VEC_SIZE * 3)(%rsi, %rdx), %ymm4
 	VPCMPEQ	(VEC_SIZE * 3)(%rdx), %ymm4, %ymm4
@@ -449,7 +450,7 @@ L(8x_return_vec_3):
 	VZEROUPPER_RETURN
 
 
-	.p2align 5
+	.p2align 4
 L(page_cross_less_vec):
 	/* if USE_AS_WMEMCMP it can only be 0, 4, 8, 12, 16, 20, 24, 28
 	   bytes.  */
@@ -489,14 +490,13 @@ L(between_8_15):
 	subl	$0xffff, %eax
 	jnz	L(return_vec_0)
 	/* Use overlapping loads to avoid branches.  */
-	leaq	-8(%rdi, %rdx), %rdi
-	leaq	-8(%rsi, %rdx), %rsi
-	vmovq	(%rdi), %xmm1
-	vmovq	(%rsi), %xmm2
+	vmovq	-8(%rdi, %rdx), %xmm1
+	vmovq	-8(%rsi, %rdx), %xmm2
 	VPCMPEQ	%xmm1, %xmm2, %xmm2
+	addl	$(VEC_SIZE - 8), %edx
 	vpmovmskb %xmm2, %eax
 	subl	$0xffff, %eax
-	jnz	L(return_vec_0)
+	jnz	L(return_vec_0_end)
 	/* No ymm register was touched.  */
 	ret
 
@@ -508,16 +508,13 @@ L(between_16_31):
 	vpmovmskb %xmm2, %eax
 	subl	$0xffff, %eax
 	jnz	L(return_vec_0)
-
 	/* Use overlapping loads to avoid branches.  */
-
 	vmovdqu	-16(%rsi, %rdx), %xmm2
-	leaq	-16(%rdi, %rdx), %rdi
-	leaq	-16(%rsi, %rdx), %rsi
-	VPCMPEQ	(%rdi), %xmm2, %xmm2
+	VPCMPEQ	-16(%rdi, %rdx), %xmm2, %xmm2
+	addl	$(VEC_SIZE - 16), %edx
 	vpmovmskb %xmm2, %eax
 	subl	$0xffff, %eax
-	jnz	L(return_vec_0)
+	jnz	L(return_vec_0_end)
 	/* No ymm register was touched.  */
 	ret
 
diff --git a/sysdeps/x86_64/multiarch/memcmp-evex-movbe.S b/sysdeps/x86_64/multiarch/memcmp-evex-movbe.S
index e552e96047..0a895f2608 100644
--- a/sysdeps/x86_64/multiarch/memcmp-evex-movbe.S
+++ b/sysdeps/x86_64/multiarch/memcmp-evex-movbe.S
@@ -163,56 +163,42 @@ ENTRY_P2ALIGN (MEMCMP, 6)
 	/* NB: eax must be zero to reach here.  */
 	ret
 
-	.p2align 4
-L(less_vec):
-	/* Check if one or less CHAR. This is necessary for size = 0 but is
-	   also faster for size = CHAR_SIZE.  */
-	cmpl	$1, %edx
-	jbe	L(one_or_less)
-
-	/* Check if loading one VEC from either s1 or s2 could cause a page
-	   cross. This can have false positives but is by far the fastest
-	   method.  */
-	movl	%edi, %eax
-	orl	%esi, %eax
-	andl	$(PAGE_SIZE - 1), %eax
-	cmpl	$(PAGE_SIZE - VEC_SIZE), %eax
-	jg	L(page_cross_less_vec)
-
-	/* No page cross possible.  */
-	VMOVU	(%rsi), %YMM2
-	VPCMP	$4, (%rdi), %YMM2, %k1
-	kmovd	%k1, %eax
-	/* Create mask in ecx for potentially in bound matches.  */
-	bzhil	%edx, %eax, %eax
+	.p2align 4,, 10
+L(8x_end_return_vec_0_1_2_3):
+	movq	%rdx, %rdi
+L(8x_return_vec_0_1_2_3):
+	addq	%rdi, %rsi
+L(return_vec_0_1_2_3):
+	VPTEST	%YMM1, %YMM1, %k0
+	kmovd	%k0, %eax
+	testl	%eax, %eax
 	jnz	L(return_vec_0)
-	ret
 
-	/* NB: L(one_or_less) fits in alignment padding between L(less_vec)
-	   and L(return_vec_0).  */
+	VPTEST	%YMM2, %YMM2, %k0
+	kmovd	%k0, %eax
+	testl	%eax, %eax
+	jnz	L(return_vec_1)
+
+	VPTEST	%YMM3, %YMM3, %k0
+	kmovd	%k0, %eax
+	testl	%eax, %eax
+	jnz	L(return_vec_2)
+	.p2align 4,, 4
+L(return_vec_3):
+	bsfl	%ecx, %ecx
 # ifdef USE_AS_WMEMCMP
-L(one_or_less):
-	jb	L(zero)
-	movl	(%rdi), %ecx
+	movl	(VEC_SIZE * 3)(%rdi, %rcx, CHAR_SIZE), %eax
 	xorl	%edx, %edx
-	cmpl	(%rsi), %ecx
-	je	L(zero)
+	cmpl	(VEC_SIZE * 3)(%rsi, %rcx, CHAR_SIZE), %eax
 	setg	%dl
 	leal	-1(%rdx, %rdx), %eax
-	ret
 # else
-L(one_or_less):
-	jb	L(zero)
-	movzbl	(%rsi), %ecx
-	movzbl	(%rdi), %eax
+	movzbl	(VEC_SIZE * 3)(%rdi, %rcx), %eax
+	movzbl	(VEC_SIZE * 3)(%rsi, %rcx), %ecx
 	subl	%ecx, %eax
-	ret
 # endif
-L(zero):
-	xorl	%eax, %eax
 	ret
 
-
 	.p2align 4
 L(return_vec_0):
 	tzcntl	%eax, %eax
@@ -231,11 +217,9 @@ L(return_vec_0):
 # endif
 	ret
 
-
-
 	.p2align 4
 L(return_vec_1):
-	tzcntl	%eax, %eax
+	bsfl	%eax, %eax
 # ifdef USE_AS_WMEMCMP
 	movl	VEC_SIZE(%rdi, %rax, CHAR_SIZE), %ecx
 	xorl	%edx, %edx
@@ -251,7 +235,7 @@ L(return_vec_1):
 
 	.p2align 4,, 10
 L(return_vec_2):
-	tzcntl	%eax, %eax
+	bsfl	%eax, %eax
 # ifdef USE_AS_WMEMCMP
 	movl	(VEC_SIZE * 2)(%rdi, %rax, CHAR_SIZE), %ecx
 	xorl	%edx, %edx
@@ -265,98 +249,6 @@ L(return_vec_2):
 # endif
 	ret
 
-	.p2align 4,, 8
-L(8x_return_vec_0_1_2_3):
-	addq	%rdi, %rsi
-L(return_vec_0_1_2_3):
-	VPTEST	%YMM1, %YMM1, %k0
-	kmovd	%k0, %eax
-	testl	%eax, %eax
-	jnz	L(return_vec_0)
-
-	VPTEST	%YMM2, %YMM2, %k0
-	kmovd	%k0, %eax
-	testl	%eax, %eax
-	jnz	L(return_vec_1)
-
-	VPTEST	%YMM3, %YMM3, %k0
-	kmovd	%k0, %eax
-	testl	%eax, %eax
-	jnz	L(return_vec_2)
-	.p2align 4,, 4
-L(return_vec_3):
-	tzcntl	%ecx, %ecx
-# ifdef USE_AS_WMEMCMP
-	movl	(VEC_SIZE * 3)(%rdi, %rcx, CHAR_SIZE), %eax
-	xorl	%edx, %edx
-	cmpl	(VEC_SIZE * 3)(%rsi, %rcx, CHAR_SIZE), %eax
-	setg	%dl
-	leal	-1(%rdx, %rdx), %eax
-# else
-	movzbl	(VEC_SIZE * 3)(%rdi, %rcx), %eax
-	movzbl	(VEC_SIZE * 3)(%rsi, %rcx), %ecx
-	subl	%ecx, %eax
-# endif
-	ret
-
-
-
-
-	.p2align 4
-L(last_2x_vec):
-	/* Check second to last VEC.  */
-	VMOVU	-(VEC_SIZE * 2)(%rsi, %rdx, CHAR_SIZE), %YMM1
-	VPCMP	$4, -(VEC_SIZE * 2)(%rdi, %rdx, CHAR_SIZE), %YMM1, %k1
-	kmovd	%k1, %eax
-	testl	%eax, %eax
-	jnz	L(return_vec_1_end)
-
-	/* Check last VEC.  */
-	.p2align 4
-L(last_1x_vec):
-	VMOVU	-(VEC_SIZE * 1)(%rsi, %rdx, CHAR_SIZE), %YMM1
-	VPCMP	$4, -(VEC_SIZE * 1)(%rdi, %rdx, CHAR_SIZE), %YMM1, %k1
-	kmovd	%k1, %eax
-	testl	%eax, %eax
-	jnz	L(return_vec_0_end)
-	ret
-
-	.p2align 4,, 10
-L(return_vec_1_end):
-	tzcntl	%eax, %eax
-	addl	%edx, %eax
-# ifdef USE_AS_WMEMCMP
-	movl	-(VEC_SIZE * 2)(%rdi, %rax, CHAR_SIZE), %ecx
-	xorl	%edx, %edx
-	cmpl	-(VEC_SIZE * 2)(%rsi, %rax, CHAR_SIZE), %ecx
-	setg	%dl
-	leal	-1(%rdx, %rdx), %eax
-# else
-	movzbl	-(VEC_SIZE * 2)(%rsi, %rax), %ecx
-	movzbl	-(VEC_SIZE * 2)(%rdi, %rax), %eax
-	subl	%ecx, %eax
-# endif
-	ret
-
-	.p2align 4,, 10
-L(return_vec_0_end):
-	tzcntl	%eax, %eax
-	addl	%edx, %eax
-# ifdef USE_AS_WMEMCMP
-	movl	-VEC_SIZE(%rdi, %rax, CHAR_SIZE), %ecx
-	xorl	%edx, %edx
-	cmpl	-VEC_SIZE(%rsi, %rax, CHAR_SIZE), %ecx
-	setg	%dl
-	leal	-1(%rdx, %rdx), %eax
-# else
-	movzbl	-VEC_SIZE(%rsi, %rax), %ecx
-	movzbl	-VEC_SIZE(%rdi, %rax), %eax
-	subl	%ecx, %eax
-# endif
-	ret
-
-
-
 	.p2align 4
 L(more_8x_vec):
 	/* Set end of s1 in rdx.  */
@@ -397,6 +289,7 @@ L(loop_4x_vec):
 	VMOVU	(VEC_SIZE * 2)(%rsi, %rdx), %YMM3
 	cmpl	$(VEC_SIZE * 2), %edi
 	jae	L(8x_last_2x_vec)
+	vpxorq	(VEC_SIZE * 2)(%rdx), %YMM3, %YMM3
 
 	VMOVU	(%rsi, %rdx), %YMM1
 	vpxorq	(%rdx), %YMM1, %YMM1
@@ -404,7 +297,7 @@ L(loop_4x_vec):
 	VMOVU	VEC_SIZE(%rsi, %rdx), %YMM2
 	vpxorq	VEC_SIZE(%rdx), %YMM2, %YMM2
 
-	vpxorq	(VEC_SIZE * 2)(%rdx), %YMM3, %YMM3
+
 	vpternlogd $0xfe, %YMM1, %YMM2, %YMM3
 
 	VMOVU	(VEC_SIZE * 3)(%rsi, %rdx), %YMM4
@@ -412,14 +305,11 @@ L(loop_4x_vec):
 	VPTEST	%YMM4, %YMM4, %k1
 	kmovd	%k1, %ecx
 	/* Restore s1 pointer to rdi.  */
-	movq	%rdx, %rdi
 	testl	%ecx, %ecx
-	jnz	L(8x_return_vec_0_1_2_3)
+	jnz	L(8x_end_return_vec_0_1_2_3)
 	/* NB: eax must be zero to reach here.  */
 	ret
 
-
-
 	/* Only entry is from L(more_8x_vec).  */
 	.p2align 4,, 10
 L(8x_last_2x_vec):
@@ -437,11 +327,11 @@ L(8x_last_1x_vec):
 	ret
 
 
-	.p2align 4
+	.p2align 4,, 4
 L(8x_return_vec_2):
 	subq	$VEC_SIZE, %rdx
 L(8x_return_vec_3):
-	tzcntl	%eax, %eax
+	bsfl	%eax, %eax
 # ifdef USE_AS_WMEMCMP
 	leaq	(%rdx, %rax, CHAR_SIZE), %rax
 	movl	(VEC_SIZE * 3)(%rax), %ecx
@@ -459,6 +349,131 @@ L(8x_return_vec_3):
 
 
 
+	.p2align 4,, 10
+L(last_2x_vec):
+	/* Check second to last VEC.  */
+	VMOVU	-(VEC_SIZE * 2)(%rsi, %rdx, CHAR_SIZE), %YMM1
+	VPCMP	$4, -(VEC_SIZE * 2)(%rdi, %rdx, CHAR_SIZE), %YMM1, %k1
+	kmovd	%k1, %eax
+	testl	%eax, %eax
+	jnz	L(return_vec_1_end)
+
+	/* Check last VEC.  */
+	.p2align 4
+L(last_1x_vec):
+	VMOVU	-(VEC_SIZE * 1)(%rsi, %rdx, CHAR_SIZE), %YMM1
+	VPCMP	$4, -(VEC_SIZE * 1)(%rdi, %rdx, CHAR_SIZE), %YMM1, %k1
+	kmovd	%k1, %eax
+	testl	%eax, %eax
+	jnz	L(return_vec_0_end)
+	ret
+
+
+
+	.p2align 4,, 10
+L(return_vec_1_end):
+	bsfl	%eax, %eax
+	addl	%edx, %eax
+# ifdef USE_AS_WMEMCMP
+	movl	-(VEC_SIZE * 2)(%rdi, %rax, CHAR_SIZE), %ecx
+	xorl	%edx, %edx
+	cmpl	-(VEC_SIZE * 2)(%rsi, %rax, CHAR_SIZE), %ecx
+	setg	%dl
+	leal	-1(%rdx, %rdx), %eax
+# else
+	movzbl	-(VEC_SIZE * 2)(%rsi, %rax), %ecx
+	movzbl	-(VEC_SIZE * 2)(%rdi, %rax), %eax
+	subl	%ecx, %eax
+# endif
+	ret
+	/* NB: L(one_or_less) fits in alignment padding between L(less_vec)
+	   and L(return_vec_0).  */
+# ifdef USE_AS_WMEMCMP
+L(one_or_less):
+	jb	L(zero)
+	movl	(%rdi), %ecx
+	xorl	%edx, %edx
+	cmpl	(%rsi), %ecx
+	je	L(zero)
+	setg	%dl
+	leal	-1(%rdx, %rdx), %eax
+	ret
+# else
+L(one_or_less):
+	jb	L(zero)
+	movzbl	(%rsi), %ecx
+	movzbl	(%rdi), %eax
+	subl	%ecx, %eax
+	ret
+# endif
+L(zero):
+	xorl	%eax, %eax
+	ret
+
+	.p2align 4
+L(return_vec_0_end):
+	tzcntl	%eax, %eax
+	addl	%edx, %eax
+# ifdef USE_AS_WMEMCMP
+	movl	-VEC_SIZE(%rdi, %rax, CHAR_SIZE), %ecx
+	xorl	%edx, %edx
+	cmpl	-VEC_SIZE(%rsi, %rax, CHAR_SIZE), %ecx
+	setg	%dl
+	leal	-1(%rdx, %rdx), %eax
+# else
+	movzbl	-VEC_SIZE(%rsi, %rax), %ecx
+	movzbl	-VEC_SIZE(%rdi, %rax), %eax
+	subl	%ecx, %eax
+# endif
+	ret
+
+
+	.p2align 4
+L(less_vec):
+	/* Check if one or less CHAR. This is necessary for size = 0 but is
+	   also faster for size = CHAR_SIZE.  */
+	cmpl	$1, %edx
+	jbe	L(one_or_less)
+
+	/* Check if loading one VEC from either s1 or s2 could cause a page
+	   cross. This can have false positives but is by far the fastest
+	   method.  */
+	movl	%edi, %eax
+	orl	%esi, %eax
+	andl	$(PAGE_SIZE - 1), %eax
+	cmpl	$(PAGE_SIZE - VEC_SIZE), %eax
+	jg	L(page_cross_less_vec)
+
+	/* No page cross possible.  */
+	VMOVU	(%rsi), %YMM2
+	VPCMP	$4, (%rdi), %YMM2, %k1
+	kmovd	%k1, %eax
+	/* Create mask in ecx for potentially in bound matches.  */
+	bzhil	%edx, %eax, %eax
+	jnz	L(return_vec_0_lv)
+	ret
+
+	.p2align 4,, 4
+L(return_vec_0_lv):
+	bsfl	%eax, %eax
+# ifdef USE_AS_WMEMCMP
+	movl	(%rdi, %rax, CHAR_SIZE), %ecx
+	xorl	%edx, %edx
+	cmpl	(%rsi, %rax, CHAR_SIZE), %ecx
+	/* NB: no partial register stall here because xorl zero idiom above.
+	 */
+	setg	%dl
+	leal	-1(%rdx, %rdx), %eax
+# else
+	movzbl	(%rsi, %rax), %ecx
+	movzbl	(%rdi, %rax), %eax
+	subl	%ecx, %eax
+# endif
+	ret
+
+
+
+
 	.p2align 4
 L(page_cross_less_vec):
 	/* if USE_AS_WMEMCMP it can only be 0, 4, 8, 12, 16, 20, 24, 28
@@ -499,14 +514,13 @@ L(between_8_15):
 	testl	%eax, %eax
 	jnz	L(return_vec_0)
 	/* Use overlapping loads to avoid branches.  */
-	leaq	-8(%rdi, %rdx, CHAR_SIZE), %rdi
-	leaq	-8(%rsi, %rdx, CHAR_SIZE), %rsi
-	vmovq	(%rdi), %xmm1
-	vmovq	(%rsi), %xmm2
+	vmovq	-8(%rdi, %rdx, CHAR_SIZE), %xmm1
+	vmovq	-8(%rsi, %rdx, CHAR_SIZE), %xmm2
 	VPCMP	$4, %xmm1, %xmm2, %k1
+	addl	$(VEC_SIZE - 8), %edx
 	kmovd	%k1, %eax
 	testl	%eax, %eax
-	jnz	L(return_vec_0)
+	jnz	L(return_vec_0_end)
 	ret
 
 
@@ -522,12 +536,11 @@ L(between_16_31):
 	/* Use overlapping loads to avoid branches.  */
 
 	vmovdqu	-16(%rsi, %rdx, CHAR_SIZE), %xmm2
-	leaq	-16(%rdi, %rdx, CHAR_SIZE), %rdi
-	leaq	-16(%rsi, %rdx, CHAR_SIZE), %rsi
-	VPCMP	$4, (%rdi), %xmm2, %k1
+	VPCMP	$4, -16(%rdi, %rdx, CHAR_SIZE), %xmm2, %k1
+	addl	$(VEC_SIZE - 16), %edx
 	kmovd	%k1, %eax
 	testl	%eax, %eax
-	jnz	L(return_vec_0)
+	jnz	L(return_vec_0_end)
 	ret
 
 # ifndef USE_AS_WMEMCMP
@@ -546,7 +559,6 @@ L(between_2_3):
 	/* Subtraction is okay because the upper 8 bits are zero.  */
 	subl	%ecx, %eax
 	ret
-# endif
-    
+# endif    
 END (MEMCMP)
 #endif
-- 
2.25.1

