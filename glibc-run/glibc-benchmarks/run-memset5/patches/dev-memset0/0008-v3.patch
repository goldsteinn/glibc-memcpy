From 201d2b6af6c7a06df0ce6f2c7e50fd9de7799354 Mon Sep 17 00:00:00 2001
From: Noah Goldstein <goldstein.w.n@gmail.com>
Date: Wed, 22 Sep 2021 23:59:34 -0500
Subject: [PATCH 08/12] v3

---
 .../multiarch/memset-vec-unaligned-erms.S     | 76 ++++++++++---------
 1 file changed, 42 insertions(+), 34 deletions(-)

diff --git a/sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S b/sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
index 21cb2f89fa..9fe3b008a0 100644
--- a/sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
+++ b/sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
@@ -183,40 +183,14 @@ L(last_2x_vec):
 	VMOVU	%VEC(0), (VEC_SIZE * -1)(%rdi)
 	VZEROUPPER_RETURN
 
-	.p2align 4,, 10
-#if defined USE_MULTIARCH && IS_IN (libc)
-L(stosb_close):
-	movzbl	%sil, %eax
-	mov	%RDX_LP, %RCX_LP
-	mov	%RDI_LP, %RDX_LP
-	rep	stosb
-	mov	%RDX_LP, %RAX_LP
-	VZEROUPPER_RETURN
-
-	.p2align 4,, 10
-L(stosb_more_2x_vec):
-	cmp	$2048, %RDX_LP
-	ja	L(stosb_close)
-#endif
-L(more_2x_vec):
-	addq	%rdx, %rdi
-	/* Stores to first 2x VEC before cmp as any path forward will
-	   require it.  */
-	VMOVU	%VEC(0), (%rax)
-	VMOVU	%VEC(0), VEC_SIZE(%rax)
-
-	cmpq	$(VEC_SIZE * 4), %rdx
-	jbe	L(last_2x_vec)
-	VMOVU	%VEC(0), (VEC_SIZE * 2)(%rax)
-	VMOVU	%VEC(0), (VEC_SIZE * 3)(%rax)
-	/* Try and have this cmp/jcc on same cache line as target and
-	   fallthrough.  */
-	cmpq	$(VEC_SIZE * 8), %rdx
-	jbe	L(last_4x_vec)
+	.p2align 4
 L(loop_4x_vec):
 	leaq	(VEC_SIZE * 4 - LOOP_4X_OFFSET)(%rax), %rcx
 	andq	$-(VEC_SIZE * 2), %rcx
-	.p2align 4,, 11
+#if LOOP_4X_OFFSET == 0
+	addq	$-(VEC_SIZE * 4), %rdi
+#endif
+	.p2align 4
 L(loop):
 	VMOVA	%VEC(0), (LOOP_4X_OFFSET)(%rcx)
 	VMOVA	%VEC(0), (LOOP_4X_OFFSET + VEC_SIZE)(%rcx)
@@ -225,8 +199,6 @@ L(loop):
 	subq	$-(VEC_SIZE * 4), %rcx
 	cmpq	%rdi, %rcx
 	jb	L(loop)
-	.p2align 4,, 4
-L(last_4x_vec):
 	VMOVU	%VEC(0), (LOOP_4X_OFFSET + VEC_SIZE * 0)(%rdi)
 	VMOVU	%VEC(0), (LOOP_4X_OFFSET + VEC_SIZE * 1)(%rdi)
 	VMOVU	%VEC(0), (LOOP_4X_OFFSET + VEC_SIZE * 2)(%rdi)
@@ -238,7 +210,43 @@ L(return):
 	ret
 #endif
 
-	.p2align 4,, 8
+#if defined USE_MULTIARCH && IS_IN (libc)
+	.p2align 4
+L(stosb_more_2x_vec):
+	cmp	x86_rep_stosb_threshold(%rip), %RDX_LP
+	ja	L(stosb_close)
+#endif
+L(more_2x_vec):
+	addq	%rdx, %rdi
+	/* Stores to first 2x VEC before cmp as any path forward will
+	   require it.  */
+	VMOVU	%VEC(0), (%rax)
+	VMOVU	%VEC(0), VEC_SIZE(%rax)
+	cmpq	$(VEC_SIZE * 4), %rdx
+	jbe	L(last_2x_vec)
+	VMOVU	%VEC(0), (VEC_SIZE * 2)(%rax)
+	VMOVU	%VEC(0), (VEC_SIZE * 3)(%rax)
+	/* Try and have this cmp/jcc on same cache line as target and
+	   fallthrough.  */
+	cmpq	$(VEC_SIZE * 8), %rdx
+	ja	L(loop_4x_vec)
+	VMOVU	%VEC(0), (VEC_SIZE * -4)(%rdi)
+	VMOVU	%VEC(0), (VEC_SIZE * -3)(%rdi)
+	VMOVU	%VEC(0), (VEC_SIZE * -2)(%rdi)
+	VMOVU	%VEC(0), (VEC_SIZE * -1)(%rdi)
+	VZEROUPPER_RETURN
+
+
+	.p2align 4,, 10
+L(stosb_close):
+	movzbl	%sil, %eax
+	mov	%RDX_LP, %RCX_LP
+	mov	%RDI_LP, %RDX_LP
+	rep	stosb
+	mov	%RDX_LP, %RAX_LP
+	VZEROUPPER_RETURN
+
+	.p2align 4
 L(less_vec):
 	/* Less than 1 VEC.  */
 #if VEC_SIZE != 16 && VEC_SIZE != 32 && VEC_SIZE != 64
-- 
2.25.1

