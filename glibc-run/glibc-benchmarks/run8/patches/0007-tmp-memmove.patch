From 23900b645ade9f59d504fcdc5541f657971b53f9 Mon Sep 17 00:00:00 2001
From: Noah Goldstein <goldstein.w.n@gmail.com>
Date: Wed, 25 Aug 2021 01:15:27 -0400
Subject: [PATCH 7/7] tmp memmove

---
 .../multiarch/memmove-vec-unaligned-erms.S    | 166 +++++++++---------
 1 file changed, 86 insertions(+), 80 deletions(-)

diff --git a/sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S b/sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
index 75b6efe969..6f1849d3b6 100644
--- a/sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
+++ b/sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
@@ -14,7 +14,7 @@
 
    You should have received a copy of the GNU Lesser General Public
    License along with the GNU C Library; if not, see
-   <https://www.gnu.org/licenses/>.  */
+<https:	// www.gnu.org/licenses/>.  */
 
 /* memmove/memcpy/mempcpy is implemented as:
    1. Use overlapping load and store to avoid branch.
@@ -49,35 +49,35 @@
 #include <sysdep.h>
 
 #ifndef MEMCPY_SYMBOL
-# define MEMCPY_SYMBOL(p,s)		MEMMOVE_SYMBOL(p, s)
+# define MEMCPY_SYMBOL(p,s)	MEMMOVE_SYMBOL(p,	s)
 #endif
 
 #ifndef MEMPCPY_SYMBOL
-# define MEMPCPY_SYMBOL(p,s)		MEMMOVE_SYMBOL(p, s)
+# define MEMPCPY_SYMBOL(p,s)	MEMMOVE_SYMBOL(p,	s)
 #endif
 
 #ifndef MEMMOVE_CHK_SYMBOL
-# define MEMMOVE_CHK_SYMBOL(p,s)	MEMMOVE_SYMBOL(p, s)
+# define MEMMOVE_CHK_SYMBOL(p,s)	MEMMOVE_SYMBOL(p,	s)
 #endif
 
 #ifndef XMM0
-# define XMM0				xmm0
+# define XMM0	xmm0
 #endif
 
 #ifndef YMM0
-# define YMM0				ymm0
+# define YMM0	ymm0
 #endif
 
 #ifndef VZEROUPPER
 # if VEC_SIZE > 16
-#  define VZEROUPPER vzeroupper
+#  define VZEROUPPER	vzeroupper
 # else
 #  define VZEROUPPER
 # endif
 #endif
 
 #ifndef PAGE_SIZE
-# define PAGE_SIZE 4096
+# define PAGE_SIZE	4096
 #endif
 
 #if PAGE_SIZE != 4096
@@ -85,78 +85,78 @@
 #endif
 
 #ifndef LOG_PAGE_SIZE
-# define LOG_PAGE_SIZE 12
+# define LOG_PAGE_SIZE	12
 #endif
 
 #if PAGE_SIZE != (1 << LOG_PAGE_SIZE)
 # error Invalid LOG_PAGE_SIZE
 #endif
 
-/* Byte per page for large_memcpy inner loop.  */
+	/* Byte per page for large_memcpy inner loop.  */
 #if VEC_SIZE == 64
-# define LARGE_LOAD_SIZE (VEC_SIZE * 2)
+# define LARGE_LOAD_SIZE	(VEC_SIZE	*	2)
 #else
-# define LARGE_LOAD_SIZE (VEC_SIZE * 4)
+# define LARGE_LOAD_SIZE	(VEC_SIZE	*	4)
 #endif
 
-/* Amount to shift rdx by to compare for memcpy_large_4x.  */
+	/* Amount to shift rdx by to compare for memcpy_large_4x.  */
 #ifndef LOG_4X_MEMCPY_THRESH
-# define LOG_4X_MEMCPY_THRESH 4
+# define LOG_4X_MEMCPY_THRESH	4
 #endif
 
-/* Avoid short distance rep movsb only with non-SSE vector.  */
+	/* Avoid short distance rep movsb only with non-SSE vector.  */
 #ifndef AVOID_SHORT_DISTANCE_REP_MOVSB
-# define AVOID_SHORT_DISTANCE_REP_MOVSB (VEC_SIZE > 16)
+# define AVOID_SHORT_DISTANCE_REP_MOVSB	(VEC_SIZE	>	16)
 #else
-# define AVOID_SHORT_DISTANCE_REP_MOVSB 0
+# define AVOID_SHORT_DISTANCE_REP_MOVSB	0
 #endif
 
 #ifndef PREFETCH
-# define PREFETCH(addr) prefetcht0 addr
+# define PREFETCH(addr)	prefetcht0	addr
 #endif
 
-/* Assume 64-byte prefetch size.  */
+	/* Assume 64-byte prefetch size.  */
 #ifndef PREFETCH_SIZE
-# define PREFETCH_SIZE 64
+# define PREFETCH_SIZE	64
 #endif
 
-#define PREFETCHED_LOAD_SIZE (VEC_SIZE * 4)
+#define PREFETCHED_LOAD_SIZE	(VEC_SIZE	*	4)
 
 #if PREFETCH_SIZE == 64
 # if PREFETCHED_LOAD_SIZE == PREFETCH_SIZE
-#  define PREFETCH_ONE_SET(dir, base, offset) \
+#  define PREFETCH_ONE_SET(dir,	base,	offset)	\
 	PREFETCH ((offset)base)
 # elif PREFETCHED_LOAD_SIZE == 2 * PREFETCH_SIZE
-#  define PREFETCH_ONE_SET(dir, base, offset) \
+#  define PREFETCH_ONE_SET(dir,	base,	offset)	\
 	PREFETCH ((offset)base); \
 	PREFETCH ((offset + dir * PREFETCH_SIZE)base)
 # elif PREFETCHED_LOAD_SIZE == 4 * PREFETCH_SIZE
-#  define PREFETCH_ONE_SET(dir, base, offset) \
+#  define PREFETCH_ONE_SET(dir,	base,	offset)	\
 	PREFETCH ((offset)base); \
 	PREFETCH ((offset + dir * PREFETCH_SIZE)base); \
 	PREFETCH ((offset + dir * PREFETCH_SIZE * 2)base); \
 	PREFETCH ((offset + dir * PREFETCH_SIZE * 3)base)
 # else
-#   error Unsupported PREFETCHED_LOAD_SIZE!
+#  error Unsupported PREFETCHED_LOAD_SIZE!
 # endif
 #else
 # error Unsupported PREFETCH_SIZE!
 #endif
 
 #if LARGE_LOAD_SIZE == (VEC_SIZE * 2)
-# define LOAD_ONE_SET(base, offset, vec0, vec1, ...) \
+# define LOAD_ONE_SET(base,	offset,	vec0,	vec1,	...)	\
 	VMOVU	(offset)base, vec0; \
 	VMOVU	((offset) + VEC_SIZE)base, vec1;
-# define STORE_ONE_SET(base, offset, vec0, vec1, ...) \
-	VMOVNT  vec0, (offset)base; \
-	VMOVNT  vec1, ((offset) + VEC_SIZE)base;
+# define STORE_ONE_SET(base,	offset,	vec0,	vec1,	...)	\
+	VMOVNT	vec0, (offset)base; \
+	VMOVNT	vec1, ((offset) + VEC_SIZE)base;
 #elif LARGE_LOAD_SIZE == (VEC_SIZE * 4)
-# define LOAD_ONE_SET(base, offset, vec0, vec1, vec2, vec3) \
+# define LOAD_ONE_SET(base,	offset,	vec0,	vec1,	vec2,	vec3)	\
 	VMOVU	(offset)base, vec0; \
 	VMOVU	((offset) + VEC_SIZE)base, vec1; \
 	VMOVU	((offset) + VEC_SIZE * 2)base, vec2; \
 	VMOVU	((offset) + VEC_SIZE * 3)base, vec3;
-# define STORE_ONE_SET(base, offset, vec0, vec1, vec2, vec3) \
+# define STORE_ONE_SET(base,	offset,	vec0,	vec1,	vec2,	vec3)	\
 	VMOVNT	vec0, (offset)base; \
 	VMOVNT	vec1, ((offset) + VEC_SIZE)base; \
 	VMOVNT	vec2, ((offset) + VEC_SIZE * 2)base; \
@@ -165,37 +165,37 @@
 # error Invalid LARGE_LOAD_SIZE
 #endif
 
-/* Whether to align before movsb. Ultimately we want 64 byte align
-   and not worth it to load 4x VEC for VEC_SIZE == 16.  */
+	/* Whether to align before movsb. Ultimately we want 64 byte align
+	   and not worth it to load 4x VEC for VEC_SIZE == 16.  */
 #define ALIGN_MOVSB	(VEC_SIZE	>	16)
 
-/* Number of VECs to align movsb to.  */
+	/* Number of VECs to align movsb to.  */
 #if VEC_SIZE == 64
 # define MOVSB_ALIGN_TO	(VEC_SIZE)
 #else
 # define MOVSB_ALIGN_TO	(VEC_SIZE	*	2)
 #endif
 
-/* Macro for copying inclusive power of 2 range with two register
-   loads.  */
-#define COPY_BLOCK(mov_inst, src_reg, dst_reg, size_reg, len, tmp_reg0, tmp_reg1)	\
+	/* Macro for copying inclusive power of 2 range with two register
+	   loads.  */
+#define COPY_BLOCK(mov_inst,	src_reg,	dst_reg,	size_reg,	len,	tmp_reg0,	tmp_reg1)	\
 	mov_inst (%src_reg), %tmp_reg0; \
 	mov_inst -(len)(%src_reg, %size_reg), %tmp_reg1; \
 	mov_inst %tmp_reg0, (%dst_reg); \
 	mov_inst %tmp_reg1, -(len)(%dst_reg, %size_reg);
 
-/* Define all copies used by L(less_vec) for VEC_SIZE of 16, 32, or
-   64.  */
-#define COPY_4_8	COPY_BLOCK(movl, rsi, rdi, rdx, 4, ecx, esi)
-#define COPY_8_16	COPY_BLOCK(movq, rsi, rdi, rdx, 8, rcx, rsi)
-#define COPY_16_32	COPY_BLOCK(vmovdqu, rsi, rdi, rdx, 16, xmm0, xmm1)
-#define COPY_32_64	COPY_BLOCK(vmovdqu64, rsi, rdi, rdx, 32, ymm16, ymm17)
+	/* Define all copies used by L(less_vec) for VEC_SIZE of 16, 32, or
+	   64.  */
+#define COPY_4_8	COPY_BLOCK(movl,	rsi,	rdi,	rdx,	4,	ecx,	esi)
+#define COPY_8_16	COPY_BLOCK(movq,	rsi,	rdi,	rdx,	8,	rcx,	rsi)
+#define COPY_16_32	COPY_BLOCK(vmovdqu,	rsi,	rdi,	rdx,	16,	xmm0,	xmm1)
+#define COPY_32_64	COPY_BLOCK(vmovdqu64,	rsi,	rdi,	rdx,	32,	ymm16,	ymm17)
 
 #ifndef SECTION
 # error SECTION is not defined!
 #endif
 
-	.section SECTION(.text),"ax",@progbits
+	.section SECTION(.text), "ax", @progbits
 #if defined SHARED && IS_IN (libc)
 ENTRY (MEMMOVE_CHK_SYMBOL (__mempcpy_chk, unaligned))
 	cmp	%RDX_LP, %RCX_LP
@@ -219,10 +219,10 @@ END (MEMMOVE_CHK_SYMBOL (__memmove_chk, unaligned))
 ENTRY (MEMMOVE_SYMBOL (__memmove, unaligned))
 	movq	%rdi, %rax
 L(start):
-# ifdef __ILP32__
+#ifdef __ILP32__
 	/* Clear the upper 32 bits.  */
 	movl	%edx, %edx
-# endif
+#endif
 	cmp	$VEC_SIZE, %RDX_LP
 	/* Based on SPEC2017 distribution both 16 and 32 memcpy calls are
 	   really hot so we want them to take the same branch path.  */
@@ -251,7 +251,7 @@ ENTRY (__mempcpy_chk_erms)
 	jb	HIDDEN_JUMPTARGET (__chk_fail)
 END (__mempcpy_chk_erms)
 
-/* Only used to measure performance of REP MOVSB.  */
+	/* Only used to measure performance of REP MOVSB.  */
 ENTRY (__mempcpy_erms)
 	mov	%RDI_LP, %RAX_LP
 	/* Skip zero length.  */
@@ -277,23 +277,23 @@ L(start_movsb):
 	jb	1f
 	/* Source == destination is less common.  */
 	je	2f
-	lea	(%rsi,%rcx), %RDX_LP
+	lea	(%rsi, %rcx), %RDX_LP
 	cmp	%RDX_LP, %RDI_LP
 	jb	L(movsb_backward)
 1:
-	rep movsb
+	rep	movsb
 2:
 	ret
 L(movsb_backward):
-	leaq	-1(%rdi,%rcx), %rdi
-	leaq	-1(%rsi,%rcx), %rsi
+	leaq	-1(%rdi, %rcx), %rdi
+	leaq	-1(%rsi, %rcx), %rsi
 	std
-	rep movsb
+	rep	movsb
 	cld
 	ret
 END (__memmove_erms)
-strong_alias (__memmove_erms, __memcpy_erms)
-strong_alias (__memmove_chk_erms, __memcpy_chk_erms)
+	strong_alias (__memmove_erms, __memcpy_erms)
+	strong_alias (__memmove_chk_erms, __memcpy_chk_erms)
 # endif
 
 # ifdef SHARED
@@ -316,8 +316,8 @@ ENTRY (MEMMOVE_CHK_SYMBOL (__memmove_chk, unaligned_erms))
 END (MEMMOVE_CHK_SYMBOL (__memmove_chk, unaligned_erms))
 # endif
 
-/* Cache align entry so that branch heavy L(less_vec) maintains good
-   alignment.  */
+	/* Cache align entry so that branch heavy L(less_vec) maintains good
+	   alignment.  */
 P2ALIGN_ENTRY (MEMMOVE_SYMBOL (__memmove, unaligned_erms), 6)
 	movq	%rdi, %rax
 L(start_erms):
@@ -596,13 +596,19 @@ L(more_8x_vec):
 	/* Entry if rdx is greater than non-temporal threshold but there is
 	   overlap.  */
 L(more_8x_vec_check):
-	cmpq	%rsi, %rdi
-	ja	L(more_8x_vec_backward)
-	/* Source == destination is less common.  */
-	je	L(nop)
+	movq	%rdi, %rcx
+	subq	%rsi, %rcx
+	cmpq	%rdx, %rcx
+	jb	L(more_8x_vec_backward_check_nop)
 	/* Entry if rdx is greater than movsb or stop movsb threshold but
 	   there is overlap with dst > src.  */
 L(more_8x_vec_forward):
+	leaq	(%rcx, %rdx), %r8
+	xorq	%rcx, %r8
+	shrq	$63, %r8
+	andl	$(PAGE_SIZE - 256), %ecx
+	addl	%r8d, %ecx
+	jz	L(more_8x_vec_backward)
 	/* Load the first VEC and last 4 * VEC to support overlapping
 	   addresses.  */
 	VMOVU	(%rsi), %VEC(4)
@@ -713,29 +719,29 @@ L(large_memcpy_2x):
 	xorq	%r8, %r9
 	subq	%r8, %r9
 	/* Don't use non-temporal store if there is overlap between
-	   destination and source since destination may be in cache when
-	   source is loaded.  */
+	   destination and source since destination may be in cache when source
+	   is loaded.  */
 	cmpq	%r9, %rdx
 	ja	L(more_8x_vec_check)
 
 	/* Cache align destination. First store the first 64 bytes then
 	   adjust alignments.  */
 	VMOVU	(%rsi), %VEC(8)
-#if VEC_SIZE < 64
+# if VEC_SIZE < 64
 	VMOVU	VEC_SIZE(%rsi), %VEC(9)
-#if VEC_SIZE < 32
+#  if VEC_SIZE < 32
 	VMOVU	(VEC_SIZE * 2)(%rsi), %VEC(10)
 	VMOVU	(VEC_SIZE * 3)(%rsi), %VEC(11)
-#endif
-#endif
+#  endif
+# endif
 	VMOVU	%VEC(8), (%rdi)
-#if VEC_SIZE < 64
+# if VEC_SIZE < 64
 	VMOVU	%VEC(9), VEC_SIZE(%rdi)
-#if VEC_SIZE < 32
+#  if VEC_SIZE < 32
 	VMOVU	%VEC(10), (VEC_SIZE * 2)(%rdi)
 	VMOVU	%VEC(11), (VEC_SIZE * 3)(%rdi)
-#endif
-#endif
+#  endif
+# endif
 	/* Adjust source, destination, and size.  */
 	movq	%rdi, %r8
 	andq	$63, %r8
@@ -749,8 +755,8 @@ L(large_memcpy_2x):
 	addq	%r8, %rdx
 
 	/* Test if source and destination addresses will alias. If they do
-	   the larger pipeline in large_memcpy_4x alleviated the
-	   performance drop.  */
+	   the larger pipeline in large_memcpy_4x alleviated the performance
+	   drop.  */
 	testl	$(PAGE_SIZE - VEC_SIZE * 8), %ecx
 	jz	L(large_memcpy_4x)
 
@@ -903,17 +909,17 @@ END (MEMMOVE_SYMBOL (__memmove, unaligned_erms))
 
 #if IS_IN (libc)
 # ifdef USE_MULTIARCH
-strong_alias (MEMMOVE_SYMBOL (__memmove, unaligned_erms),
-	      MEMMOVE_SYMBOL (__memcpy, unaligned_erms))
+	strong_alias (MEMMOVE_SYMBOL (__memmove, unaligned_erms),
+	MEMMOVE_SYMBOL (__memcpy, unaligned_erms))
 #  ifdef SHARED
-strong_alias (MEMMOVE_SYMBOL (__memmove_chk, unaligned_erms),
-	      MEMMOVE_SYMBOL (__memcpy_chk, unaligned_erms))
+	strong_alias (MEMMOVE_SYMBOL (__memmove_chk, unaligned_erms),
+	MEMMOVE_SYMBOL (__memcpy_chk, unaligned_erms))
 #  endif
 # endif
 # ifdef SHARED
-strong_alias (MEMMOVE_CHK_SYMBOL (__memmove_chk, unaligned),
-	      MEMMOVE_CHK_SYMBOL (__memcpy_chk, unaligned))
+	strong_alias (MEMMOVE_CHK_SYMBOL (__memmove_chk, unaligned),
+	MEMMOVE_CHK_SYMBOL (__memcpy_chk, unaligned))
 # endif
 #endif
-strong_alias (MEMMOVE_SYMBOL (__memmove, unaligned),
-	      MEMCPY_SYMBOL (__memcpy, unaligned))
+	strong_alias (MEMMOVE_SYMBOL (__memmove, unaligned),
+	MEMCPY_SYMBOL (__memcpy, unaligned))
-- 
2.25.1

