From d0fe5f6f50b2202b4df669b591ae2151024f1c8c Mon Sep 17 00:00:00 2001
From: Noah Goldstein <goldstein.w.n@gmail.com>
Date: Wed, 29 Sep 2021 21:33:43 -0500
Subject: [PATCH 09/10] tmp

---
 sysdeps/x86_64/multiarch/bcmp-evex.S | 201 +++++++++++++--------------
 1 file changed, 100 insertions(+), 101 deletions(-)

diff --git a/sysdeps/x86_64/multiarch/bcmp-evex.S b/sysdeps/x86_64/multiarch/bcmp-evex.S
index 00bd7c0447..70487a340c 100644
--- a/sysdeps/x86_64/multiarch/bcmp-evex.S
+++ b/sysdeps/x86_64/multiarch/bcmp-evex.S
@@ -71,7 +71,6 @@ ENTRY (BCMP)
 	kmovd	%k1, %eax
 	testl	%eax, %eax
 	jnz	L(return_neq0)
-
 	cmpq	$(VEC_SIZE * 2), %rdx
 	jbe	L(last_1x_vec)
 
@@ -108,96 +107,31 @@ ENTRY (BCMP)
 
 	VMOVU	-(VEC_SIZE * 4)(%rsi, %rdx), %YMM1
 	VMOVU	-(VEC_SIZE * 3)(%rsi, %rdx), %YMM2
-	addq	%rdx, %rdi
-
-	/* Wait to load from s1 until addressed adjust due to unlamination.
-	 */
-
-	/* vpxor will be all 0s if s1 and s2 are equal. Otherwise it will
-	   have some 1s.  */
-	vpxorq	-(VEC_SIZE * 4)(%rdi), %YMM1, %YMM1
-	vpxorq	-(VEC_SIZE * 3)(%rdi), %YMM2, %YMM2
+    addq    %rdx, %rdi
+    vpxorq	-(VEC_SIZE * 4)(%rdi), %YMM1, %YMM1
+	vpternlogd $0xde, -(VEC_SIZE * 3)(%rdi), %YMM1, %YMM2
 
 	VMOVU	-(VEC_SIZE * 2)(%rsi, %rdx), %YMM3
 	vpxorq	-(VEC_SIZE * 2)(%rdi), %YMM3, %YMM3
 	/* Or together YMM1, YMM2, and YMM3 into YMM3.  */
-	vpternlogd $0xfe, %YMM1, %YMM2, %YMM3
-
 	VMOVU	-(VEC_SIZE)(%rsi, %rdx), %YMM4
-	/* Ternary logic to xor (VEC_SIZE * 3)(%rdi) with YMM4 while oring
-	   with YMM3. Result is stored in YMM4.  */
-	vpternlogd $0xde, -(VEC_SIZE)(%rdi), %YMM3, %YMM4
-	/* Compare YMM4 with 0. If any 1s s1 and s2 don't match.  */
-	VPTEST	%YMM4, %YMM4, %k1
-	kmovd	%k1, %eax
-L(return_neq0):
-	ret
+	vpxorq	-(VEC_SIZE)(%rdi), %YMM4, %YMM4
 
-	/* Fits in padding needed to .p2align 5 L(less_vec).  */
-L(last_1x_vec):
-	VMOVU	-(VEC_SIZE * 1)(%rsi, %rdx), %YMM1
-	VPCMP	$4, -(VEC_SIZE * 1)(%rdi, %rdx), %YMM1, %k1
-	kmovd	%k1, %eax
-	ret
 
-	/* NB: p2align 5 here will ensure the L(loop_4x_vec) is also 32 byte
-	   aligned.  */
-	.p2align 5
-L(less_vec):
-	/* Check if one or less char. This is necessary for size = 0 but is
-	   also faster for size = 1.  */
-	cmpl	$1, %edx
-	jbe	L(one_or_less)
-
-	/* Check if loading one VEC from either s1 or s2 could cause a page
-	   cross. This can have false positives but is by far the fastest
-	   method.  */
-	movl	%edi, %eax
-	orl	%esi, %eax
-	andl	$(PAGE_SIZE - 1), %eax
-	cmpl	$(PAGE_SIZE - VEC_SIZE), %eax
-	jg	L(page_cross_less_vec)
-
-	/* No page cross possible.  */
-	VMOVU	(%rsi), %YMM2
-	VPCMP	$4, (%rdi), %YMM2, %k1
-	kmovd	%k1, %eax
-	/* Result will be zero if s1 and s2 match. Otherwise first set bit
-	   will be first mismatch.  */
-	bzhil	%edx, %eax, %eax
-	ret
+    vpternlogd $0xfe, %YMM2, %YMM3, %YMM4
 
-	/* Relatively cold but placing close to L(less_vec) for 2 byte jump
-	   encoding.  */
-	.p2align 4
-L(one_or_less):
-	jb	L(zero)
-	movzbl	(%rsi), %ecx
-	movzbl	(%rdi), %eax
-	subl	%ecx, %eax
-	/* No ymm register was touched.  */
-	ret
-	/* Within the same 16 byte block is L(one_or_less).  */
-L(zero):
-	xorl	%eax, %eax
-	ret
-
-	.p2align 4
-L(last_2x_vec):
-	VMOVU	-(VEC_SIZE * 2)(%rsi, %rdx), %YMM1
-	vpxorq	-(VEC_SIZE * 2)(%rdi, %rdx), %YMM1, %YMM1
-	VMOVU	-(VEC_SIZE * 1)(%rsi, %rdx), %YMM2
-	vpternlogd $0xde, -(VEC_SIZE * 1)(%rdi, %rdx), %YMM1, %YMM2
-	VPTEST	%YMM2, %YMM2, %k1
+	/* Compare YMM4 with 0. If any 1s s1 and s2 don't match.  */
+	VPTEST	%YMM4, %YMM4, %k1
 	kmovd	%k1, %eax
+L(return_neq0):
 	ret
 
 	.p2align 4
 L(more_8x_vec):
 	/* Set end of s1 in rdx.  */
-	leaq	-(VEC_SIZE * 4)(%rdi, %rdx), %rdx
-	/* rsi stores s2 - s1. This allows loop to only update one pointer.
-	 */
+    leaq    -(VEC_SIZE * 4)(%rdi, %rdx), %rdx
+	/* rsi stores s2 - s1. This allows loop to only update one
+	   pointer.  */
 	subq	%rdi, %rsi
 	/* Align s1 pointer.  */
 	andq	$-VEC_SIZE, %rdi
@@ -209,14 +143,18 @@ L(loop_4x_vec):
 	vpxorq	(%rdi), %YMM1, %YMM1
 
 	VMOVU	VEC_SIZE(%rsi, %rdi), %YMM2
-	vpxorq	VEC_SIZE(%rdi), %YMM2, %YMM2
+    vpternlogd $0xde, (VEC_SIZE)(%rdi), %YMM1, %YMM2
+	
 
 	VMOVU	(VEC_SIZE * 2)(%rsi, %rdi), %YMM3
 	vpxorq	(VEC_SIZE * 2)(%rdi), %YMM3, %YMM3
-	vpternlogd $0xfe, %YMM1, %YMM2, %YMM3
+
 
 	VMOVU	(VEC_SIZE * 3)(%rsi, %rdi), %YMM4
-	vpternlogd $0xde, (VEC_SIZE * 3)(%rdi), %YMM3, %YMM4
+	vpxorq	(VEC_SIZE * 3)(%rdi), %YMM4, %YMM4
+
+    vpternlogd $0xfe, %YMM2, %YMM3, %YMM4
+    
 	VPTEST	%YMM4, %YMM4, %k1
 	kmovd	%k1, %eax
 	testl	%eax, %eax
@@ -233,8 +171,8 @@ L(loop_4x_vec):
 	jae	L(8x_last_1x_vec)
 	/* Load regardless of branch.  */
 	VMOVU	(VEC_SIZE * 2)(%rsi, %rdx), %YMM3
-	/* Ternary logic to xor (VEC_SIZE * 2)(%rdx) with YMM3 while oring
-	   with YMM4. Result is stored in YMM4.  */
+	/* Ternary logic to xor (VEC_SIZE * 2)(%rdx) with YMM3 while
+	   oring with YMM4. Result is stored in YMM4.  */
 	vpternlogd $0xf6, (VEC_SIZE * 2)(%rdx), %YMM3, %YMM4
 	cmpl	$(VEC_SIZE * 2), %edi
 	jae	L(8x_last_2x_vec)
@@ -253,6 +191,69 @@ L(8x_last_2x_vec):
 L(return_neq2):
 	ret
 
+	.p2align 4
+L(last_2x_vec):
+	VMOVU	-(VEC_SIZE * 2)(%rsi, %rdx), %YMM1
+	vpxorq	-(VEC_SIZE * 2)(%rdi, %rdx), %YMM1, %YMM1
+	VMOVU	-(VEC_SIZE * 1)(%rsi, %rdx), %YMM2
+	vpternlogd $0xde, -(VEC_SIZE * 1)(%rdi, %rdx), %YMM1, %YMM2
+	VPTEST	%YMM2, %YMM2, %k1
+	kmovd	%k1, %eax
+	ret
+
+	/* NB: p2align 5 here will ensure the L(loop_4x_vec) is also 32
+	   byte aligned.  */
+	.p2align 5
+L(less_vec):
+	/* Check if one or less char. This is necessary for size = 0 but
+	   is also faster for size = 1.  */
+	cmpl	$1, %edx
+	jbe	L(one_or_less)
+
+	/* Check if loading one VEC from either s1 or s2 could cause a
+	   page cross. This can have false positives but is by far the
+	   fastest method.  */
+	movl	%edi, %eax
+	orl	%esi, %eax
+	andl	$(PAGE_SIZE - 1), %eax
+	cmpl	$(PAGE_SIZE - VEC_SIZE), %eax
+	jg	L(page_cross_less_vec)
+
+	/* No page cross possible.  */
+	VMOVU	(%rsi), %YMM2
+	VPCMP	$4, (%rdi), %YMM2, %k1
+	kmovd	%k1, %eax
+	/* Result will be zero if s1 and s2 match. Otherwise first set
+	   bit will be first mismatch.  */
+	bzhil	%edx, %eax, %eax
+	ret
+
+	/* Relatively cold but placing close to L(less_vec) for 2 byte
+	   jump encoding.  */
+	.p2align 4
+L(one_or_less):
+	jb	L(zero)
+	movzbl	(%rsi), %ecx
+	movzbl	(%rdi), %eax
+	subl	%ecx, %eax
+	/* No ymm register was touched.  */
+	ret
+	/* Within the same 16 byte block is L(one_or_less).  */
+L(zero):
+	xorl	%eax, %eax
+	ret
+
+
+	.p2align 5
+	/* Fits in padding needed to .p2align 5 L(less_vec).  */
+L(last_1x_vec):
+	VMOVU	-(VEC_SIZE * 1)(%rsi, %rdx), %YMM1
+	VPCMP	$4, -(VEC_SIZE * 1)(%rdi, %rdx), %YMM1, %k1
+	kmovd	%k1, %eax
+	ret
+
+
+
 	/* Relatively cold case as page cross are unexpected.  */
 	.p2align 4
 L(page_cross_less_vec):
@@ -264,11 +265,10 @@ L(page_cross_less_vec):
 	jb	L(between_2_3)
 	/* From 4 to 8 bytes.  No branch when size == 4.  */
 	movl	(%rdi), %eax
-	movl	(%rsi), %ecx
-	subl	%ecx, %eax
+	subl	(%rsi), %eax
 	movl	-4(%rdi, %rdx), %ecx
-	movl	-4(%rsi, %rdx), %esi
-	subl	%esi, %ecx
+	movl	-4(%rsi, %rdx), %edi
+	subl	%edi, %ecx
 	orl	%ecx, %eax
 	ret
 
@@ -287,16 +287,27 @@ L(between_9_15):
 	subl	$0xffff, %eax
 	/* No ymm register was touched.  */
 	ret
-
+    
+L(between_2_3):
+	/* From 2 to 3 bytes.  No branch when size == 2.  */
+	movzwl	(%rdi), %eax
+	movzwl	(%rsi), %ecx
+	subl	%ecx, %eax
+	movzbl	-1(%rdi, %rdx), %ecx
+	subb	-1(%rsi, %rdx), %cl
+	orl	%ecx, %eax
+	/* No ymm register was touched.  */
+	ret
+    
 	.p2align 4,, 8
 L(between_16_31):
 	/* From 16 to 31 bytes.  No branch when size == 16.  */
 
 	/* Safe to use xmm[0, 15] as no vzeroupper is needed so RTM safe.
 	 */
-	vmovdqu	(%rsi), %xmm1
+	movups	(%rsi), %xmm1
 	vpcmpeqb (%rdi), %xmm1, %xmm1
-	vmovdqu	-16(%rsi, %rdx), %xmm2
+	movups	-16(%rsi, %rdx), %xmm2
 	vpcmpeqb -16(%rdi, %rdx), %xmm2, %xmm2
 	vpand	%xmm1, %xmm2, %xmm2
 	vpmovmskb %xmm2, %eax
@@ -304,18 +315,6 @@ L(between_16_31):
 	/* No ymm register was touched.  */
 	ret
 
-	.p2align 4,, 8
-L(between_2_3):
-	/* From 2 to 3 bytes.  No branch when size == 2.  */
-	movzwl	(%rdi), %eax
-	movzwl	(%rsi), %ecx
-	subl	%ecx, %eax
-	movzbl	-1(%rdi, %rdx), %edi
-	movzbl	-1(%rsi, %rdx), %esi
-	subl	%edi, %esi
-	orl	%esi, %eax
-	/* No ymm register was touched.  */
-	ret
 
     .p2align 12
 END (BCMP)
-- 
2.25.1

